#+TITLE: Starter Kit Yasnippet
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Yasnippet
[[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs.  It is
inspired by TextMate's templating syntax.
- watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
- see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

** Load Snippets Distributed with the Starter Kit
   :PROPERTIES:
   :CUSTOM_ID: default-snippets
   :END:
Load the snippets defined in the =./snippets/= directory.
#+begin_src emacs-lisp
(yas/load-directory "~/.emacs.d/snippets")
#+end_src

** Configure Yasnippets for Org Mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:

The latest version of yasnippets doesn't play well with Org-mode, the
following function allows these two to play nicely together. In Org-mode, a
white space should be spared or yas-next-field will not work.
#+begin_src emacs-lisp
  (defun yas/org-very-safe-expand ()
    (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))

  (defun yas/org-setup ()
    ;; yasnippet (using the new org-cycle hooks)
    (make-variable-buffer-local 'yas/trigger-key)
    (setq yas/trigger-key [tab])
    (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
    (define-key yas-keymap [tab] 'yas-next-field)
    )

  (add-hook 'org-mode-hook #'yas/org-setup)
#+end_src

** Configure for Python mode
   
Indent in Python mode may be confusing. Set fixed so yas will not indent
automatically, but just as in snippet.
#+begin_src emacs-lisp
(defun yas-py-conf ()
  (setq-local yas-indent-line 'fixd))
(add-hook 'python-mode-hook 'yas-py-conf)
#+end_src

** Rebind key of yas
   
using *TAB* as yas-expand conflicts with Latex-mode, so bind it to other key.

#+BEGIN_SRC emacs-lisp
(define-key yas-minor-mode-map (kbd "<tab>") nil)
(define-key yas-minor-mode-map (kbd "TAB") nil)
(define-key yas-minor-mode-map (kbd "C-c C-e") 'yas-expand)
#+END_SRC

** Use popup
#+begin_src emacs-lisp
(eval-after-load 'popup
  '(progn
     (define-key popup-menu-keymap (kbd "M-n") 'popup-next)
     (define-key popup-menu-keymap (kbd "TAB") 'popup-next)
     (define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
     (define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
     (define-key popup-menu-keymap (kbd "M-p") 'popup-previous)))

(defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t)))

(setq yas-prompt-functions
      '(yas-popup-isearch-prompt
        yas-no-prompt))
#+end_src

** yas everywhere
#+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
#+END_SRC

