#+TITLE: Starter Kit Yasnippet
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Yasnippet
[[http://code.google.com/p/yasnippet/][yasnippet]] is yet another snippet expansion system for Emacs.  It is
inspired by TextMate's templating syntax.
- watch the [[http://www.youtube.com/watch?v=vOj7btx3ATg][video on YouTube]]
- see the [[http://yasnippet.googlecode.com/svn/trunk/doc/index.html][intro and tutorial]]

** yas everywhere
#+BEGIN_SRC emacs-lisp
;; Only use snippets distributed with the Starter Kit
(setq yas-snippet-dirs (expand-file-name "snippets" starter-kit-dir))
;; Auto indentation is too slow
(setq yas-indent-line 'fixed)
;; Don't re-activate snippet fields after undo/redo
(setq yas-snippet-revival nil)
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC

** Configure Yasnippets for Org Mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:

The latest version of yasnippets doesn't play well with Org-mode, the
following function allows these two to play nicely together.
#+begin_src emacs-lisp
(defun yas/org-expand-or-next-field ()
  (let ((yas-fallback-behavior 'return-nil))
    (cond ((and
            (not (evil-normal-state-p))
            (not (org-at-heading-p))
            (yas-expand)))
          ((yas--snippets-at-point)
           (yas-next-field)
           t))))

(defun yas/org-setup ()
  ;; yasnippet (using the new org-cycle hooks)
  (add-to-list 'org-tab-first-hook 'yas/org-expand-or-next-field))

(add-hook 'org-mode-hook #'yas/org-setup)
#+end_src

** Indentation configuration for prog mode

Indent in some prog mode may be confusing. Set fixed so yas will not indent
automatically, but just as in snippet.
#+begin_src emacs-lisp
(defun yas-conf-fixed-indent ()
  (setq-local yas-indent-line 'fixed))
(mapc
 (lambda (hook)
   (add-hook hook 'yas-conf-fixed-indent))
 '(python-mode-hook c-mode-common-hook f90-mode-hook))
#+end_src

** Use popup
#+begin_src emacs-lisp
(eval-after-load 'popup
  '(progn
     (define-key popup-menu-keymap (kbd "M-n") 'popup-next)
     (define-key popup-menu-keymap (kbd "TAB") 'popup-next)
     (define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
     (define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
     (define-key popup-menu-keymap (kbd "M-p") 'popup-previous)))

(defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t)))

(setq yas-prompt-functions
      '(yas-popup-isearch-prompt
        yas-no-prompt))
#+end_src
