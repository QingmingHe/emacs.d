#+TITLE: Starter Kit Gud
#+OPTIONS: toc:2 num:nil ^:nil

* Starter Kit Gud

** Compile

Another way to compile dwim is to set =compile-command= in project
=.dir-locals=.
#+begin_src emacs-lisp
(setq compilation-scroll-output t)

(defvar compile-dir-last nil
  "Last working directory of Compile.")

(defun compile-dwim ()
  (interactive)
  (let ((default-directory
          (ido-read-directory-name
           "Compile working directory: "
           compile-dir-last
           ".")))
    (call-interactively 'compile)))

(eval-after-load "f90" `(define-key f90-mode-map (kbd "<f5>") 'compile-dwim))
(eval-after-load "cc-mode"
  `(progn
     (define-key c-mode-map (kbd "<f5>") 'compile-dwim)
     (define-key c++-mode-map (kbd "<f5>") 'compile-dwim)))
#+end_src

** Gdb

#+begin_src emacs-lisp
(setq gdb-show-main nil)

(when *cygwin*
  (setq gdb-non-stop-setting nil))

(defvar gdb-working-dir-last nil
  "Last working directory of GDB.")

(defvar gdb-program-last "."
  "Last program to be debugged.")

(defun run-gdb-dwim ()
  (interactive)
  (let* ((dir
          (setq gdb-working-dir-last
                (ido-read-directory-name
                 "GDB working directory: "
                 gdb-working-dir-last
                 ".")))
         (prog
          (setq gdb-program-last
                (ido-read-file-name
                 "Program to be debugged: "
                 (file-name-directory gdb-program-last)
                 (file-name-nondirectory gdb-program-last))))
         (default-directory dir)
         (args
          (read-shell-command "Arguments passed to program: "))
         (src-buffer (current-buffer)))
    (unless global-linum-mode
      (global-linum-mode))
    (setq linum-format 'dynamic)
    (if (y-or-n-p "Use IDE? ")
        (progn
          (gdb (format "gdb -i=mi --cd=%s --args %s %s" dir prog args))
          (unless gdb-many-windows
            (gdb-many-windows)))
      (delete-other-windows)
      (gud-gdb (format "gdb --fullname --cd=%s --args %s %s" dir prog args))
      (pop-to-buffer src-buffer)
      (other-window -1))))

(defun turn-off-gobal-linum-after-gud ()
  (interactive)
  (when (and
         (derived-mode-p 'gud-mode)
         global-linum-mode)
    (global-linum-mode -1)))
(add-hook 'kill-buffer-hook 'turn-off-gobal-linum-after-gud)

(eval-after-load "f90" `(define-key f90-mode-map (kbd "C-<f5>") 'run-gdb-dwim))
(eval-after-load "cc-mode"
  `(progn
     (define-key c-mode-map (kbd "C-<f5>") 'run-gdb-dwim)
     (define-key c++-mode-map (kbd "C-<f5>") 'run-gdb-dwim)))
#+end_src

** Pdb

#+begin_src emacs-lisp
(defun run-pdb-dwim ()
  (interactive)
  (let* ((default-directory
           (ido-read-directory-name
            "Pdb working directory: "))
         (fname (buffer-file-name))
         (script
          (ido-read-file-name
           "Script to dubug: "
           (file-name-directory fname)
           (file-name-nondirectory fname))))
    (pdb (format "python -m pdb %s" script))))

(eval-after-load "python"
  `(define-key python-mode-map (kbd "C-<f5>") 'run-pdb-dwim))
#+end_src
