#+TITLE: Starter Kit Gud
#+OPTIONS: toc:2 num:nil ^:nil

* Starter Kit Gud
** Compile
*** Auto show subtree
Grep and compilation use =compile-goto-error= to locate. The problem is this
function will not auto expand folding after go to due buffer and point which
is annoying in org mode. Advice below is for:
1. Switch window and then switch back to set current buffer to be buffer of
   current file. It's may be a bug that =compile-goto-error= will set current
   buffer to be the *compilation* or *grep* buffer.
2. Determine whether invisible or not and show subtree if invisible.
3. Recenter window.

#+begin_src emacs-lisp
(defadvice compile-goto-error (after cge-after activate)
  (other-window 1)
  (other-window -1)
  (when (outline-invisible-p)
    (show-subtree))
  (recenter))
#+end_src

*** Key bindings for compilation

#+begin_src emacs-lisp
(defun compilation-display-error-dwim ()
  (interactive)
  (compile-goto-error)
  (other-window -1))

(eval-after-load "compile"
  `(progn
     (define-key compilation-mode-map (kbd "j") 'compilation-next-error)
     (define-key compilation-mode-map (kbd "k") 'compilation-previous-error)
     (define-key compilation-mode-map (kbd "d") 'compilation-display-error-dwim)
     (define-key compilation-mode-map (kbd "q") 'bury-buffer)))
#+end_src

*** Compilation do what I mean

Another way to compile dwim is to set =compile-command= in project
=.dir-locals=.
#+begin_src emacs-lisp
(setq compilation-ask-about-save nil)
(setq compilation-scroll-output t)

(defvar compile-dir-last nil
  "Last working directory of Compile.")

(defvar compile-dir-default nil
  "Default compilation directory set by user. This value will be used in
`compile-dwim' as the `default-directory'. To best use this variable, set it
in your project \".dir-locals\".")
(make-variable-buffer-local 'compile-dir-default)

(defun compile-dwim ()
  "Use `ido-mode' to set directory to run compilation. The compilation window
is splitted vertically and limited to 10 lines height."
  (interactive)
  (let ((default-directory
          (ido-read-directory-name
           "Compile working directory: "
           (or compile-dir-default compile-dir-last)
           ".")))
    (setq compile-dir-last default-directory)
    (call-interactively 'compile)
    (with-selected-window (get-buffer-window "*compilation*")
      (bury-buffer))))

(defun show-compile-window-not-success (buffer string)
  (unless (string-match "finished" string)
    (with-current-buffer buffer
      (goto-char (point-min))
      (call-interactively 'compilation-next-error))
    (pop-to-buffer buffer)))

(eval-after-load 'compile
  `(add-hook 'compilation-finish-functions 'show-compile-window-not-success))

(eval-after-load "f90" `(define-key f90-mode-map (kbd "<f5>") 'compile-dwim))
(with-eval-after-load 'fortran
  (define-key fortran-mode-map (kbd "<f5>") 'compile-dwim))
(eval-after-load "cc-mode"
  `(progn
     (define-key c-mode-map (kbd "<f5>") 'compile-dwim)
     (define-key c++-mode-map (kbd "<f5>") 'compile-dwim)))
#+end_src

** Gdb
*** Run gdb as I mean

#+begin_src emacs-lisp
(setq gdb-show-main nil)

(when *cygwin*
  (setq gdb-non-stop-setting nil))

(defvar gdb-working-dir-last nil
  "Last working directory of GDB.")

(defvar gdb-program-last "."
  "Last program to be debugged.")

(defun run-gdb-dwim ()
  (interactive)
  (let* ((dir
          (setq gdb-working-dir-last
                (ido-read-directory-name
                 "GDB working directory: "
                 gdb-working-dir-last
                 ".")))
         (prog
          (setq gdb-program-last
                (ido-read-file-name
                 "Program to be debugged: "
                 (file-name-directory gdb-program-last)
                 (file-name-nondirectory gdb-program-last))))
         (default-directory dir)
         (args
          (read-shell-command "Arguments passed to program: "))
         (src-buffer (current-buffer)))
    (if (y-or-n-p "Use IDE? ")
        (progn
          (gdb (format "gdb -i=mi --cd=%s --args %s %s" dir prog args))
          (unless gdb-many-windows
            (gdb-many-windows)))
      (delete-other-windows)
      (gud-gdb (format "gdb --fullname --cd=%s --args %s %s" dir prog args))
      (pop-to-buffer src-buffer)
      (other-window -1))))

(eval-after-load "f90" `(define-key f90-mode-map (kbd "C-<f5>") 'run-gdb-dwim))
(with-eval-after-load 'fortran
  (define-key fortran-mode-map (kbd "C-<f5>") 'run-gdb-dwim))
(eval-after-load "cc-mode"
  `(progn
     (define-key c-mode-map (kbd "C-<f5>") 'run-gdb-dwim)
     (define-key c++-mode-map (kbd "C-<f5>") 'run-gdb-dwim)))
#+end_src

*** Highlight current GUD line

Add color to the current GUD line (obrigado google)
#+begin_src emacs-lisp
(defvar gud-overlay
  (let* ((ov (make-overlay (point-min) (point-min))))
    (overlay-put ov 'face 'secondary-selection)
    ov)
  "Overlay variable for GUD highlighting.")

(defadvice gud-display-line (after my-gud-highlight act)
  "Highlight current line."
  (let* ((ov gud-overlay)
         (bf (gud-find-file true-file)))
    (save-excursion
      (set-buffer bf)
      (move-overlay ov (line-beginning-position) (line-end-position)
                    (current-buffer)))))

(defun gud-kill-buffer-remove-ov ()
  (if (eq major-mode 'gud-mode)
      (delete-overlay gud-overlay)))

(add-hook 'kill-buffer-hook 'gud-kill-buffer-remove-ov)
#+end_src

*** The very busy control-c control-c for GUD

#+begin_src emacs-lisp
(defvar gud-ctrl-c-ctrl-c-hook nil
  "The very busy control-c control-c in GUD.")

(defun run-gud-ctrl-c-ctrl-c ()
  (interactive)
  (let (return-val)
    (catch 'fn-return-t
      (mapc
       (lambda (fn)
         (setq return-val (call-interactively fn))
         (when return-val
           (throw 'fn-return-t return-val)))
       gud-ctrl-c-ctrl-c-hook))))

(with-eval-after-load 'gud
  (define-key gud-mode-map (kbd "C-c C-c") 'run-gud-ctrl-c-ctrl-c))

(defun gud-pulse-break ()
  (interactive)
  (require 'pulse)
  (let* ((b (bounds-of-thing-at-point 'filename))
         (b0 (car b))
         (b1 (cdr b))
         (fname-linum (when b
                  (buffer-substring-no-properties b0 b1)))
         linum
         fname)
    (when fname-linum
      (string-match "\\([^:]+\\):?\\([0-9]+\\)?" fname-linum)
      (setq fname (match-string 1 fname-linum))
      (setq linum (match-string 2 fname-linum)))
    (when (and
           fname
           linum
           (file-exists-p fname))
      (find-file-other-window fname)
      (when linum
        (goto-line (string-to-int linum))
        (pulse-momentary-highlight-one-line (point)))
      (other-window -1)
      t)))

(add-hook 'gud-ctrl-c-ctrl-c-hook 'gud-pulse-break)
#+end_src

** Pdb

#+begin_src emacs-lisp
(defun run-pdb-dwim ()
  (interactive)
  (let* ((default-directory
           (ido-read-directory-name
            "Pdb working directory: "))
         (fname (buffer-file-name))
         (script
          (ido-read-file-name
           "Script to dubug: "
           (file-name-directory fname)
           (file-name-nondirectory fname))))
    (pdb (format "python -m pdb %s" script))))

(eval-after-load "python"
  `(define-key python-mode-map (kbd "C-<f5>") 'run-pdb-dwim))
#+end_src
