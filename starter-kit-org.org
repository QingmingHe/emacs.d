#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

To install org, you may need to key in command:
#+BEGIN_SRC sh
make autoloads
#+END_SRC
at root of org package.

** Org-Mode Hook

+ On the key bindings of org-cdlatex, see also [[file:starter-kit-latex.org::*cdlatex][cdlatex]].
#+begin_src emacs-lisp
(defun my-org-config ()
  ;; other minor mode
  (eldoc-mode)
  (turn-on-flyspell)
  ;; (visual-line-mode 1)
  ;; (adaptive-wrap-prefix-mode 1)
  (org-cdlatex-mode))
(with-eval-after-load 'org
  (add-hook 'org-mode-hook 'my-org-config)
  ;; I use `helm-insert-latex-math' instead
  (define-key org-cdlatex-mode-map "`" 'self-insert-command)
  (define-key org-cdlatex-mode-map "'" 'self-insert-command))
#+end_src

** The very busy ctrl-c-ctrl-c
*** Batch replace label and references

It's painful to update references once a label is changed. Fortunately we have
the powerful [[help:query-replace-regexp][query-replace-regexp]] which can replace a label and all its
references at once.
#+begin_src emacs-lisp
(defun org-query-replace-label-and-ref ()
  "Batch replace label and its reference in current buffer by
`query-replace-regexp'. This command will act inside of braces of \\label,
\\eqref or \\ref latex keywords and return t; Otherwise do nothing and return
nil."
  (interactive)
  (when (and
         (looking-at "[^}\n]*}")
         (looking-back "\\\\\\(label\\|eqref\\|ref\\){[^{\n]*"))
    (let (ref)
      (save-excursion
        (setq ref
              (buffer-substring-no-properties
               (1+ (search-backward "{"))
               (1- (search-forward "}")))))
      (query-replace-regexp (format "\\\\\\(label\\|eqref\\|ref\\){%s}"
                                    (regexp-quote ref))
                            (format "\\\\\\1{%s}"
                                    (read-string
                                     (format "Replace \"%s\" with: " ref)))
                            nil (point-min) (point-max)))
    t))

(with-eval-after-load 'org
  (add-hook 'org-ctrl-c-ctrl-c-hook 'org-query-replace-label-and-ref))
#+end_src

*** Preview latex fragments

#+begin_src emacs-lisp
(defun org-preview-latex-fragments-at-point ()
  "Preview latex fragments at point. "
  (interactive)
  (when (and
         (org-inside-LaTeX-fragment-p)
         (not
          (and
           (looking-at "[^}\n]*}")
           (looking-back "\\\\label{[^{\n]*")))
         (not
          (member (overlays-at (point)) org-latex-fragment-image-overlays)))
    (call-interactively 'org-preview-latex-fragment)
    t))

(with-eval-after-load 'org
  (add-hook 'org-ctrl-c-ctrl-c-hook 'org-preview-latex-fragments-at-point))
#+end_src

** Use RET and TAB in org mode

+ Use RET to follow link in org mode. Problem is that press RET will open a
  new line in [[help:evil-normal-state][evil-normal-state]].
+ In terminal TAB and C-i are the same. [[help:org-cycle][org-cycle]] is more important then
  [[help:evil-jump-forward][evil-jump-forward]] in org mode. So remap it to org-cycle. There is no such
  problem in gui Emacs.
#+begin_src emacs-lisp
(setq org-return-follows-link t)
(with-eval-after-load 'evil
  (with-eval-after-load 'org
    (define-key org-mode-map [remap evil-ret] 'org-return)
    (unless (window-system)
      (define-key org-mode-map [remap evil-jump-forward] 'org-cycle))))
#+end_src

** Time and clock
*** Time stamp

You may not want to see Chinese words in a English-style time stamp.
#+BEGIN_SRC emacs-lisp
(setq system-time-locale "C")
#+END_SRC

*** Org clock
Change task state to *STARTED* when clocking in.
#+BEGIN_SRC emacs-lisp
(setq org-clock-in-switch-to-state "STARTED")
#+END_SRC

Save clock data and notes in the *LOGBOOK* drawer.
#+BEGIN_SRC emacs-lisp
(setq org-clock-into-drawer t)
#+END_SRC

Remove clocked tasks with 0:00 duration.
#+BEGIN_SRC emacs-lisp
(setq org-clock-out-remove-zero-time-clocks t)
#+END_SRC

Show the clocked-in task if possible at Emacs head. This is shadowed by
which-function-mode.
#+BEGIN_SRC emacs-lisp :tangle no
(defun sanityinc/show-org-clock-in-header-line ()
  (setq-default header-line-format '((" " org-mode-line-string " "))))

(defun sanityinc/hide-org-clock-from-header-line ()
  (setq-default header-line-format nil))

(add-hook 'org-clock-in-hook 'sanityinc/show-org-clock-in-header-line)
(add-hook 'org-clock-out-hook 'sanityinc/hide-org-clock-from-header-line)
(add-hook 'org-clock-cancel-hook 'sanityinc/hide-org-clock-from-header-line)

(eval-after-load 'org-clock
  '(progn
     (define-key org-clock-mode-line-map [header-line mouse-2] 'org-clock-goto)
     (define-key org-clock-mode-line-map [header-line mouse-1] 'org-clock-menu)))
#+END_SRC

** Speed keys
   :PROPERTIES:
   :CUSTOM_ID: speed-keys
   :END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

** Code blocks
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'ob)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)
     (python . t)
     (scheme . t))))
#+end_src

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

Show two window for code editing. See also [[elisp:(describe-variable 'org-src-window-setup)][org-src-window-setup]].
#+begin_src emacs-lisp
(setq org-src-window-setup 'other-window)
#+end_src

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-highlight-latex-and-related '(latex entities))
#+end_src

** The Library of Babel
   :PROPERTIES:
   :CUSTOM_ID: library-of-babel
   :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.
** Various preferences
#+BEGIN_SRC emacs-lisp
(setq org-log-done t
      org-completion-use-ido t
      org-edit-src-content-indentation 0
      org-edit-timestamp-down-means-later t
      org-agenda-start-on-weekday nil
      org-agenda-span 14
      org-agenda-window-setup 'current-window
      org-fast-tag-selection-single-key 'expert
      org-export-kill-product-buffer-when-displayed t
      org-export-odt-preferred-output-format "doc"
      org-tags-column 80
      org-pretty-entities nil
      org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps t)
#+END_SRC

** Org export to pdf and html
*** XeLaTeX

Use XeLaTeX to export PDF and compile three times to generate references. You
should note that TeX file should be saved as utf-8 encoded or XeLaTeX can't
compile it.
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

*** Source highlight

Use minted to highlight source code in exported LaTeX.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted))
#+END_SRC

*** Preview latex fragments

Use *dvipng* to preview latex fragments in org. As *minted* is used to
highlight source in latex, *-shell-escape* command should be passed to
latex. However, the dvipng method call latex directly without the command and
a user option to control it (See [[http://orgmode.org/worg/org-tutorials/org-latex-preview.html][org tutorial]]). I have to define a advice to
evade this problem.
#+begin_src emacs-lisp
(setq org-latex-create-formula-image-program 'dvipng)
(defadvice org-preview-latex-fragment (around preview-without-minted activate)
  (let ((org-latex-packages-alist
         (remove '("" "minted") org-latex-packages-alist)))
    ad-do-it))
#+end_src

*** MathJaX

Use MathJaX instead of LaTeX to support math in html for that LaTeX is too
slow to generate math pictures. To enable LaTeX if you like, just add to head
of org file:
#+BEGIN_SRC text
#+OPTIONS: tex:imagemagick
#+END_SRC

New in MathJax v2.0 is the ability to have equations to be numbered
automatically which is turned off by default. To activate it:
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'ox-html
  (setq org-html-mathjax-template
        (format "%s%s" org-html-mathjax-template
                "
<script type=\"text/x-mathjax-config\">
MathJax.Hub.Config({
  TeX: { equationNumbers: { autoNumber: \"AMS\" } }
});
</script>"))
  (setq org-html-mathjax-options '((path "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
                                   (scale "100")
                                   (align "center")
                                   (indent "2em")
                                   (mathml t))))
#+END_SRC

** Getting Things Done

#+BEGIN_QUOTE
Getting Things Done is a time-management method, described in a book of the
same title by productivity consultant David Allen. It is often referred to as
GTD.

The GTD method rests on the idea of moving planned tasks and projects out of
the mind by recording them externally and then breaking them into actionable
work items. This allows one to focus attention on taking action on tasks,
instead of on recalling them.
#+END_QUOTE
*** Org TODO

The default org todo keywords are *TODO* and *DONE*, which is not adequate for
handling daily work and several other words are added.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!/!)")
              (sequence "WAITING(w@/!)" "SOMEDAY(S)" "PROJECT(P@)" "|" "CANCELED(c@/!)"))))
#+END_SRC

*** Org capture

Since Org-8.0, org no longer support remember but use its own capture to
*CAPTURE* ideas, notes and so on in a very fast manner.

The path of gtd files and the templates are at the mercy of you and the author
just provide a possible one. The meanings of these templates are:

+ *Task* work or job can be done in several hours or several days
+ *Daily* work scheduled daily and should be accomplished in time
+ *Calendar* periodical events
+ *Project* temporary container of project
+ *Note* container of ideas and notes

#+BEGIN_SRC emacs-lisp
(when gtd-root
  (setq org-directory (format "%s/%s" gtd-root "source")
        org-default-notes-file (concat org-directory "/inbox.org")
        org-capture-templates
        '(("t" "Task" entry (file+headline org-default-notes-file "Tasks")
           "** TODO %?\n   SCHEDULED: %T \n   %i")
          ("d" "Daily" entry (file+headline org-default-notes-file "Dailies")
           "** %?\n   SCHEDULED: %T \n   %i")
          ("l" "Calendar" entry (file+headline org-default-notes-file "Calendar")
           "** %?\n   %T")
          ("p" "Project" entry (file+headline org-default-notes-file "Projects")
           "** %?\n   SCHEDULED: %T \n   %i")
          ("n" "Note" entry (file+headline org-default-notes-file "Notes")
           "** %?\n   :PROPERTIES: \n   :TIMESTAMP_IA: %U \n   :END: \n   %i"))))
#+END_SRC

*** Org agenda

Set files where org agenda will extract from.

#+BEGIN_SRC emacs-lisp
(when gtd-root
  (setq org-agenda-files (list org-default-notes-file))
  (mapc
   (lambda (item)
     (when (file-exists-p (concat org-directory "/" item))
       (add-to-list 'org-agenda-files (concat org-directory "/" item))))
   '("inbox.org" "projects.org" "finished.org" "canceled.org" "notes.org")))
#+END_SRC

*** Org refile

Org refile provides a convenient method for moving a tree to another. The max
refile level is set to be 3, or you can change it as you like. To ease refile,
set targets start with the file name and complete in steps with *TAB*.

#+BEGIN_SRC emacs-lisp
(when gtd-root
  (setq org-refile-files org-agenda-files)
  (setq org-refile-targets (quote ((nil :maxlevel . 3)
                                   (org-refile-files :maxlevel . 3)))))
#+END_SRC

*** Org publish
    :PROPERTIES:
    :TANGLE:   no
    :END:

The setup is very personal. May be this subsection should be moved to
=user-settings.org=.
#+BEGIN_SRC emacs-lisp
(when gtd-root
  (require 'ox-publish)
  (require 'ox-html)
  (setq org-publish-project-alist
        '(("gtd-html"
           :base-directory "~/docs/gtd/source/"
           :base-extension "org"
           :recursive nil
           :headline-levels 2
           :auto-preamble t
           :publishing-directory "~/docs/gtd/html"
           :publishing-function org-html-publish-to-html
           :author "Qingming He"
           :email "906459647@qq.com")
          ("all" :components ("gtd-html" )))))
#+END_SRC

** Archive

#+begin_src emacs-lisp
(defun my-org-archive-done-tasks ()
  "Archive finished or cancelled tasks."
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "TODO=\"DONE\"|TODO=\"CANCELLED\"" (if (org-before-first-heading-p) 'file 'tree)))
#+end_src

** Tips and comments
*** Key bindings

+ You can use *C-c '* to edit source code in its own mode.
+ Powerful *C-c C-c* at code block, table, ...

*** Math

The best way is:
\begin{equation}
\label{eq:1}
y = sin(x)
\end{equation}
which can be referenced by \ref{eq:1}. This both works in html and latex.
