#+TITLE: Starter Kit Project
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Project

Use gtags, etags, imenu ... to handle projects.

** Define project

First define projects.
#+BEGIN_SRC emacs-lisp
(setq prj/update-tags-verbose nil)
(setq prj/completion-backend 'company)

;; lazy load project mode
(setq prj/global-mode-loaded nil)
(defun lazy-load-project-mode ()
  (unless prj/global-mode-loaded
    (require 'project)
    (global-project-mode 1)
    (prj/setup)
    (setq prj/global-mode-loaded t)
    (remove-hook 'find-file-hook 'lazy-load-project-mode)))
(add-hook 'find-file-hook 'lazy-load-project-mode)

(setq project-roots
      `(("CExamples"
         :root-contains-files (".CExample-root.el")
         :tags-tool "gtags")
        ("SUGAR"
         :root-contains-files (".SUGAR-root.el")
         :exclude-paths ("benchmarks" "docs" "html" "latex" "lib" "test" "unittest")
         :include-tags ("~/.TAGS/mpi-f90" "~/.TAGS/hdf5-fortran")
         :use-completion (f90-mode))
        ("cacti"
         :root-contains-files (".cacti-root")
         :use-completion (f90-mode))
        ("openmc"
         :root-contains-files (".openmc-root")
         :include-tags ("~/.TAGS/mpi-f90" "~/.TAGS/hdf5-fortran")
         :use-completion (f90-mode))
        ("ctags"
         :root-contains-files (".ctags-root")
         :tags-tool "gtags")
        ("mcnp"
         :root-contains-files (".mcnp-root")
         :exclude-paths ("run_tests" "Testing"))
        ("EmacsConfig"
         :root-contains-files (".EmacsConfig-root.el")
         :exclude-paths ("backups" "auto-save-list"))
        ("UFP"
         :root-contains-files (".UFP-root.el")
         :exclude-paths ("Debug" "input" "kintab" "output" "plib" "scratch"
                         "ulib" "文档"))
        ("RMET21"
         :root-contains-files ("RMET21" "GEXSCO" "SLAMBD" "WLUTIL")
         :exclude-paths ("BROADR" "BUILD" "BUILD_CYGWIN" "CMAKE" "build_debug"
                         "build_release" "TESTS"))
        ("pyPkgs"
         :root-contains-files (".pyPkgs.el")
         :exclude-paths ("build"))
        ("GTD"
         :root-contains-files ("inbox.org" "projects.org" "notes.org"))
        ("openmoc"
         :root-contains-files (".openmoc-root"))
        ("necp_x"
         :root-contains-files (".necp_x-root")
         :use-completion (f90-mode))))
#+END_SRC

** Ctags

You should use *Exuberant Ctags* instead of etags supplied with Emacs. The
former is much more powerful especially in introducing new languages.
*** Teach Ctags to Support Org mode

Add to your =~/.ctags= file:
#+begin_src sh :tangle no
--langdef=Org
--langmap=Org:.org
--regex-Org=/^\* +(.+)$/\1/c,chapter/
--regex-Org=/^\*\* +(.+)$/\1/s,section/
--regex-Org=/^\*\*\* +(.+)$/\1/u,subsection/
#+end_src

*** Don't ask yes or no when reverting tags file

#+BEGIN_SRC emacs-lisp
(setq tags-revert-without-query t)
#+END_SRC

*** Set tags file name nil

#+BEGIN_SRC emacs-lisp
;; set tags-file-name to be nil so no error in writing .ido.last
(add-hook 'kill-emacs-hook (lambda ()
                             (setq tags-file-name nil)) t)
#+END_SRC

*** Helm ctags

The limit level or directory to search tag file should not be too deep. Four
is OK, or you should consider restructure your project.
#+begin_src emacs-lisp
(setq helm-etags-tag-file-search-limit 4)
#+end_src

I don't want Org headings are invisible when I jump to it.
#+begin_src emacs-lisp
(defadvice helm-etags-action-goto (after helm-etags-goto-outline-show-subtree activate)
  (when (outline-invisible-p)
    (show-subtree))
  (recenter))
#+end_src

Toggle match part only. See also [[elisp:(describe-variable 'helm-etags-match-part-only)][helm-etags-match-part-only]].
#+begin_src emacs-lisp
(defun helm-etags-toggle-match-part-only ()
  (interactive)
  (setq helm-etags-match-part-only (not helm-etags-match-part-only)))
(eval-after-load "helm-tags"
  `(define-key helm-etags-map (kbd "C-c C-t") 'helm-etags-toggle-match-part-only))
#+end_src

** Gtags

#+begin_src emacs-lisp
(setq helm-gtags-pulse-at-cursor nil)
(setq helm-gtags-ignore-case t)
(setq helm-gtags-cache-select-result t)
(setq helm-gtags-use-input-at-cursor t)
(setq helm-gtags-display-style 'detail)
#+end_src

** taglist

#+BEGIN_SRC emacs-lisp
(defun my-taglist ()
  (interactive)
  (list-tags (buffer-file-name)))
#+END_SRC

** imenu
*** Rescan imenu after save file

#+begin_src emacs-lisp
(setq imenu-sort-function #'imenu--sort-by-position)
(setq imenu-auto-rescan nil)
(defun starter-kit-imenu-rescan ()
  (interactive)
  (require 'imenu)
  (when (derived-mode-p 'org-mode 'prog-mode 'markdown-mode 'rst-mode)
    (imenu--menubar-select imenu--rescan-item)))
(add-hook 'after-save-hook 'starter-kit-imenu-rescan)
#+end_src

*** Imenu with Ido
#+BEGIN_SRC emacs-lisp
(defun my-imenu (&optional symbol-list)
  "Refresh imenu and jump to a place in the buffer using Ido."
  (interactive)
  (unless (featurep 'imenu)
    (require 'imenu nil t))
  (cond
   ((not symbol-list)
    (let ((ido-mode ido-mode)
          (ido-enable-flex-matching
           (if (boundp 'ido-enable-flex-matching)
               ido-enable-flex-matching t))
          name-and-pos symbol-names position)
      (unless ido-mode
        (ido-mode 1)
        (setq ido-enable-flex-matching t))
      (while (progn
               (imenu--cleanup)
               (setq imenu--index-alist nil)
               (my-imenu (imenu--make-index-alist))
               (setq selected-symbol
                     (ido-completing-read "Symbol? " symbol-names))
               (string= (car imenu--rescan-item) selected-symbol)))
      (unless (and (boundp 'mark-active) mark-active)
        (push-mark nil t nil))
      (setq position (cdr (assoc selected-symbol name-and-pos)))
      (cond
       ((overlayp position)
        (goto-char (overlay-start position)))
       (t
        (goto-char position)))))
   ((listp symbol-list)
    (dolist (symbol symbol-list)
      (let (name position)
        (cond
         ((and (listp symbol) (imenu--subalist-p symbol))
          (my-imenu symbol))
         ((listp symbol)
          (setq name (car symbol))
          (setq position (cdr symbol)))
         ((stringp symbol)
          (setq name symbol)
          (setq position
                (get-text-property 1 'org-imenu-marker symbol))))
        (unless (or (null position) (null name)
                    (string= (car imenu--rescan-item) name))
          (add-to-list 'symbol-names name)
          (add-to-list 'name-and-pos (cons name position))))))))
#+END_SRC

** How to use imenu, ctags and taglist
**** Key bindings
See [[~/.emacs.d/starter-kit-evil.org]] for key bindings.

**** imenu

*M-x my-imenu* use imenu with ido

**** Make and update tags file

+ Define project in project-roots.
+ *M-x my-make-tags* to make tags file for the project. Note that path to make
  tags should be the root of project.
+ *M-x etags-update-mode* to activate etags update mode.
+ Emacs will update tags file automatically.
+ Answer *n* to "keep current list of tags table also?"

**** find tag
*\ta* and chose a key word. If multiple tags exist, etags-select will work and
 pop a buffer for tags selecting.

**** taglist
*\tl* opens taglist and navigate with *jk*.
