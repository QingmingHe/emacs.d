#+TITLE: Starter Kit Helm
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Helm

** Install helm

   #+BEGIN_SRC sh :tangle no
     cd /path/to/helm-dir
     make autoloads
   #+END_SRC

** Basic setup

#+begin_src emacs-lisp
;; do not use helm everywhere
;; (helm-mode 1)
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x p") 'prj/helm-mini)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-h a") 'helm-apropos)
(global-set-key (kbd "C-c y") 'helm-yas-complete)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(eval-after-load "helm"
  `(progn
     (define-key helm-map (kbd "C-f") 'helm-next-page)
     (define-key helm-map (kbd "C-b") 'helm-previous-page)))

;; helm eshell
(eval-after-load "helm-eshell"
  `(progn
     (define-key helm-eshell-history-map (kbd "M-n") 'helm-next-line)
     (define-key helm-eshell-history-map (kbd "M-p") 'helm-previous-line)))

(setq
 helm-split-window-in-side-p t
 helm-move-to-line-cycle-in-source t
 helm-ff-search-library-in-sexp t
 helm-scroll-amount 8
 helm-ff-file-name-history-use-recentf t)

;; helm swoop
(setq helm-multi-swoop-edit-save t
      helm-swoop-split-with-multiple-windows t
      helm-swoop-move-to-line-cycle t)
#+end_src

** Commands use helm, ido or native Emacs

Helm or ido sometimes do wrong things.
#+BEGIN_SRC emacs-lisp
(setq helm-completing-read-handlers-alist
     '((describe-function . helm-completing-read-symbols)
       (describe-variable . helm-completing-read-symbols)
       (debug-on-entry . helm-completing-read-symbols)
       (find-function . helm-completing-read-symbols)
       (find-tag . helm-completing-read-with-cands-in-buffer)
       (find-tag . helm-comp-read)
       (ffap-alternate-file . nil)
       (tmm-menubar . nil)
       (minibuffer-complete . nil)
       (minibuffer-complete-help . nil)
       (read-file-name . ido)
       (completion-at-point . nil)
       (dired-do-copy . nil)
       (dired-do-rename . nil)
       (dired-create-directory . nil)
       (w3m-goto-url . nil)
       (rgrep . nil)))
#+END_SRC

** Remove duplicate eshell history
    :PROPERTIES:
    :TANGLE:   yes
    :END:

+ Remove duplicates in eshell history ring.
+ Use [[elisp:write-region]] instead of [[elisp:write-file]] for that the previous is
  faster and quite.
+ This can be realized by set [[elisp:(describe-variable 'eshell-hist-ignoredups)][eshell-hist-ignoredups]] to be t.
#+begin_src emacs-lisp
(defadvice eshell-write-history (after remove-eshell-history-dup-after-write activate)
  (with-temp-buffer
    (insert-file-contents eshell-history-file-name)
    (let ((his-ring
           (delete-dups
            (split-string
             (buffer-substring-no-properties (point-min) (point-max))
             "\n"))))
      (with-temp-buffer
        (mapc
         (lambda (item)
           (unless (string-empty-p item)
             (insert (format "%s\n" item))))
         his-ring)
        (write-region (point-min) (point-max) eshell-history-file-name nil 'no-message)))))
#+end_src

** Tips
*** General
1. use * to narrow by major mode and @ to grep.
2. use *C-j* to perform action without quite helm.
3. use *M-SPC* to mark current element, *M-a* mark all, *M-u* to unmark all.
4. use *M-n* to yank symbol at point.
*** How to find file
1. Basically you can use ido-find-file, which is binded to *C-x C-f*.
2. To find a file recursively under path, use *helm-find* command.
3. To find a file in project, use *prj/find-file*.
*** M-x doesn't work
Run dired and M-x works. I don't known why.
*** Query replace in multiple files
+ Open files in dired or use *M-x helm-find*
+ *M-x helm-multi-swoop* and select buffers
+ type key words
+ *C-c C-e* enter edit mode in swoop buffer
+ run evil command *:%s/word0/word1/gc*
