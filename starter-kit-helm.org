#+TITLE: Starter Kit Helm
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Helm
  
** Install helm

#+BEGIN_SRC emacs-lisp
(let* ((helm-dir (concat starter-kit-dir "src/helm-master/"))
       (helm-autoloads-file (concat helm-dir "helm-autoloads.el")))
  (when (not (file-exists-p helm-autoloads-file))
    (let ((default-directory helm-dir))
      (shell-command "make autoloads"))))
#+END_SRC

** Basic setup

#+begin_src emacs-lisp
(require 'helm)
(require 'helm-config)
;; do not use helm everywhere
;; (helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(define-key helm-map (kbd "C-f") 'helm-next-page)
(define-key helm-map (kbd "C-b") 'helm-previous-page)
(setq
 helm-split-window-in-side-p t
 helm-move-to-line-cycle-in-source t
 helm-ff-search-library-in-sexp t
 helm-scroll-amount 8
 helm-ff-file-name-history-use-recentf t)
#+end_src
   
** Commands use helm, ido or native emacs
   
Helm or ido sometimes do wrong things.
#+BEGIN_SRC emacs-lisp 
(setq helm-completing-read-handlers-alist
     '((describe-function . helm-completing-read-symbols)
       (describe-variable . helm-completing-read-symbols)
       (debug-on-entry . helm-completing-read-symbols)
       (find-function . helm-completing-read-symbols)
       (find-tag . helm-comp-read)
       (ffap-alternate-file . nil)
       (tmm-menubar . nil)
       (find-file . ido)
       (minibuffer-complete . nil)
       (minibuffer-complete-help . nil)
       (execute-extended-command . ido)
       (read-directory-name . ido)
       (read-file-name . ido)
       (completion-at-point . nil)
       (dired-do-copy . nil)
       (dired-do-rename . nil)
       (dired-create-directory . nil)
       (w3m-goto-url . nil)
       ))
#+END_SRC

** Disable helm for specific modes

#+BEGIN_SRC emacs-lisp 
(setq my-helm-en-dis-alist
      '((shell-mode . nil)))

(defun en-dis-helm (&optional mode)
  (interactive)
  (let* ((mode (or mode major-mode))
         (mode-alist (or (assoc mode my-helm-en-dis-alist) '(mode . 0)))
         (enable-helm (cdr mode-alist)))
    (cond ((eq 0 enable-helm) nil)
          (enable-helm (helm-mode 1))
          ((not enable-helm) (helm-mode -1)))))

;; (add-hook 'after-change-major-mode-hook 'en-dis-helm)
#+END_SRC

** Tips
*** General
1. use * to narrow by major mode and @ to grep.
2. use *C-j* to perform action without quite helm.
3. use *M-SPC* to mark current element, *M-a* mark all, *M-u* to unmark all.
*** How to find file
1. Basically you can use ido-find-file, which is binded to *C-x C-f*.
2. To find a file recursively under path, use *helm-find* command.
3. To find a file in project, use *prj/find-file*.
