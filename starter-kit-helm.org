#+TITLE: Starter Kit Helm
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Helm

** Install helm

   #+BEGIN_SRC sh :tangle no
     cd /path/to/helm-dir
     make autoloads
   #+END_SRC

** Basic setup

#+begin_src emacs-lisp
;; do not use helm everywhere
;; (helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-c h k") 'helm-show-kill-ring)
(define-key helm-map (kbd "C-f") 'helm-next-page)
(define-key helm-map (kbd "C-b") 'helm-previous-page)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(setq
 helm-split-window-in-side-p t
 helm-move-to-line-cycle-in-source t
 helm-ff-search-library-in-sexp t
 helm-scroll-amount 8
 helm-ff-file-name-history-use-recentf t)

;; helm swoop
(setq helm-multi-swoop-edit-save t
      helm-swoop-split-with-multiple-windows nil
      helm-swoop-move-to-line-cycle t)
#+end_src

** Commands use helm, ido or native emacs

Helm or ido sometimes do wrong things.
#+BEGIN_SRC emacs-lisp
(setq helm-completing-read-handlers-alist
     '((describe-function . helm-completing-read-symbols)
       (describe-variable . helm-completing-read-symbols)
       (debug-on-entry . helm-completing-read-symbols)
       (find-function . helm-completing-read-symbols)
       (find-tag . helm-comp-read)
       (ffap-alternate-file . nil)
       (tmm-menubar . nil)
       (find-file . ido)
       (minibuffer-complete . nil)
       (minibuffer-complete-help . nil)
       (execute-extended-command . ido)
       (read-directory-name . ido)
       (read-file-name . ido)
       (completion-at-point . nil)
       (dired-do-copy . nil)
       (dired-do-rename . nil)
       (dired-create-directory . nil)
       (w3m-goto-url . nil)))
#+END_SRC

** Tips
*** General
1. use * to narrow by major mode and @ to grep.
2. use *C-j* to perform action without quite helm.
3. use *M-SPC* to mark current element, *M-a* mark all, *M-u* to unmark all.
4. use *M-n* to yank symbol at point.
*** How to find file
1. Basically you can use ido-find-file, which is binded to *C-x C-f*.
2. To find a file recursively under path, use *helm-find* command.
3. To find a file in project, use *prj/find-file*.
*** M-x doesn't work
Run dired and M-x works. I don't known why.
*** Query replace in multiple files
+ Open files in dired or use *M-x helm-find*
+ *M-x helm-multi-swoop* and select buffers
+ type key words
+ *C-c C-e* enter edit mode in swoop buffer
+ run evil command *:%s/word0/word1/gc*
