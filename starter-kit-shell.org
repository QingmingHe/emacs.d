#+TITLE: Starter Kit Shell
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Shell
** Eshell

[[http://www.emacswiki.org/emacs/CategoryEshell][Eshell]] is a great shell.

*** Configurations

#+begin_src emacs-lisp
(setq eshell-cmpl-cycle-completions nil
      eshell-save-history-on-exit t
      eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'"
      eshell-history-size 1000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-output nil
      eshell-scroll-show-maximum-output t)

(defun my-esh-opt ()
  (add-to-list 'eshell-visual-commands "ssh")
  (add-to-list 'eshell-visual-commands "tail")
  (add-to-list 'eshell-command-completions-alist
               '("gunzip" "gz\\'"))
  (add-to-list 'eshell-command-completions-alist
               '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'"))
  (add-to-list 'eshell-command-completions-alist
               '("unzip" "\\.zip\\'"))
  (add-to-list 'eshell-output-filter-functions 'eshell-handle-ansi-color)
  (add-to-list 'eshell-output-filter-functions 'eshell-postoutput-scroll-to-bottom))

(eval-after-load 'esh-opt
  '(progn
     ;; TODO: for some reason requiring this here breaks it, but
     ;; requiring it after an eshell session is started works fine.
     ;; (require 'eshell-vc)
     (setenv "PAGER" "cat")
     ; (set-face-attribute 'eshell-prompt nil :foreground "turquoise1")
     (add-hook 'eshell-mode-hook ;; for some reason this needs to be a hook
               'my-esh-opt)))
#+end_src

The =eshell= directory holds alias definitions and history
information.  It is much like a =.bashrc= file for those who are
familiar with bash.  This set the value of =eshell-directory-name= to
point to the =eshell= directory in this directory.  The =alias= file
is pre-populated with some generally applicable aliases.

#+begin_src emacs-lisp
  (setq eshell-directory-name
        (expand-file-name "./" (expand-file-name "eshell" starter-kit-dir)))
#+end_src

*** Key bindings

+ Use *C-a* to move to beginning of line of beginning of command line.
+ Use *C-p* or *M-p* to complete eshell history with helm.

#+begin_src emacs-lisp
(defun my-eshell-goto-bottom ()
  (interactive)
  (evil-goto-line)
  (eshell-bol))

(defun my-eshell-keybinding ()
  (define-key eshell-mode-map "\C-a" 'eshell-bol)
  (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)
  (define-key eshell-mode-map (kbd "C-p") 'helm-eshell-history)
  (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
  (evil-define-key 'normal eshell-mode-map (kbd "G") 'my-eshell-goto-bottom)
  (evil-define-key 'insert eshell-mode-map (kbd "C-p") 'helm-eshell-history))
(add-hook 'eshell-mode-hook 'my-eshell-keybinding)
#+end_src

*** Eldoc

#+begin_src emacs-lisp
(defadvice eldoc-current-symbol (around eldoc-current-symbol-a activate)
  ad-do-it
  (when (and (not ad-return-value)
             (eq major-mode 'eshell-mode))
    (save-excursion
      (goto-char eshell-last-output-end)
      (let ((esym (eshell-find-alias-function (current-word)))
            (sym (intern-soft (current-word))))
        (setq ad-return-value (or esym sym))))))
(defun eshell-turn-on-eldoc ()
  (eldoc-mode 1))
(add-hook 'eshell-mode-hook 'eshell-turn-on-eldoc)
#+end_src

*** Tips
**** Multiple eshells
You can create eshell by just *M-x eshell*, or if can run *C-u 2 M-x eshell*
to create a eshell numbered 2. If eshell 2 already exists, you will switch to
it. If *M-x* is bound to *helm-M-x*, run *M-x C-u 2 eshell* instead.

**** Alias

The difference between shell alias and eshell alias is that there should not
be a *=* between alias name and command. Because eshell alias is a compiled
lisp function =eshell/alias= which defines an ALIAS using DEFINITION (two
variables). So define *la* like this:
#+begin_src sh
alias ll 'ls -la $*'
#+end_src

You can also define alias with some variables given:
#+begin_src sh
alias clean-white-spaces 'clean-white-spaces $1 t'
#+end_src

To delete an alias:
#+begin_src sh
alias some-alias
#+end_src

**** Combine Eshell with Helm

Use eshell command on each file marked in =helm-find-files=. Command should
accept one file as argument. Aliases ended with "\\(\\$1\\|\\$\\*\\)$" can be
completed by helm.

**** Pseudo device
#+begin_src sh
echo hello > /dev/clip    # goes to the clipboard
echo hello > /dev/kill    # goes to the kill ring
#+end_src

** Multi eshell

Use =multi-eshell= to handle multiple shells. Use *\-mn* to create new shell or
switch to anther existing shell. Shell doesn't support zsh well, so specify
shell file name to be bash. Don't add =--login= to explicit-bash-args, or
shell will run at =~/= path with the =default-directory= to be that of
previous buffer. This will make path completion problematic.
#+begin_src emacs-lisp
(eval-after-load "shell"
  `(define-key shell-mode-map (kbd "C-p") 'helm-comint-input-ring))
(setq explicit-shell-file-name (executable-find "bash"))
(setq explicit-bash-args '("--noediting" "-i"))
#+end_src

** Term and ansi-term

In most cases, shell is in my favour. Only when I want to run another app
inside emacs, I will resort to to awkward term or ansi-term.

You can key in command in char mode and copy/paste in line mode. The follow
function and kbd provide easy toggling.

#+BEGIN_SRC emacs-lisp
(eval-after-load "term"
  `(add-hook 'term-mode-hook
             (lambda ()
               (define-key term-mode-map (kbd "C-c C-j") 'term-char-mode))))
#+END_SRC

** Shell script

#+begin_src emacs-lisp
(eval-after-load "sh-script"
  `(define-key sh-mode-map (kbd "C-c C-c") 'sh-send-line-or-region-and-step))
#+end_src
