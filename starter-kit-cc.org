#+TITLE: Starter Kit CC
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit CC
** Configurations

#+BEGIN_SRC emacs-lisp
(setq c-eldoc-includes " -I./ ")
(setq c-eldoc-buffer-regenerate-time 60)
(defun my-c-common-config ()
  (c-turn-on-eldoc-mode)
  (modify-syntax-entry ?_ "w")
  (c-set-offset 'substatement-open 0))
(eval-after-load "cc-mode"
  `(progn
     (add-hook 'c-mode-hook 'my-c-common-config)
     (add-hook 'c++-mode-hook 'my-c-common-config)))
#+END_SRC

** C insert -> token

#+begin_src emacs-lisp
(defun cc-insert--> ()
  (interactive)
  (insert "->"))

(with-eval-after-load 'cc-mode
  (key-chord-define c-mode-map ".." #'cc-insert-->))
#+end_src

** Comment style

#+begin_src emacs-lisp
(defun set-c-javadoc-comment-style ()
  (interactive)
  (setq-local comment-start "/*")
  (setq-local comment-end "*/")
  (setq-local c-block-comment-prefix "* "))
(add-hook 'c-mode-hook 'set-c-javadoc-comment-style)
(add-hook 'c++-mode-hook 'set-c-javadoc-comment-style)
#+end_src

** Key bindings

Find the corresponding file and go to function signature.
#+begin_src emacs-lisp
(defun my-ff-find-other-file ()
  (interactive)
  (if (string-match-p "\\.\\(cpp\\|cxx\\|c\\|c++\\)$" (buffer-name))
      (let ((func (split-string (or (which-function) "") "::")))
        (ff-find-other-file t)
        (when (> (length func) 0)
          (goto-char (point-min))
          (mapc
           (lambda (str)
             (search-forward str nil t))
           func)))
    (ff-find-other-file t)))
#+end_src

Define key bindings.
#+begin_src emacs-lisp
(defun setup-cc-keybindings ()
  (interactive)
  (local-set-key (kbd "C-c C-p") 'beginning-of-defun)
  (local-set-key (kbd "C-c C-n") 'end-of-defun)
  (local-set-key (kbd "C-x C-o") 'my-ff-find-other-file))
(add-hook 'c-mode-hook 'setup-cc-keybindings)
(add-hook 'c++-mode-hook 'setup-cc-keybindings)
#+end_src
