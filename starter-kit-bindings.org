#+TITLE: Starter Kit Bindings
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Bindings
** Align

#+begin_src emacs-lisp
(global-set-key (kbd "M-\\") 'align-regexp)
#+end_src

** No tab

#+begin_src emacs-lisp
(set-default 'indent-tabs-mode nil)
(set-default 'tab-width 4)
#+end_src

** Move beginning/end of line

#+begin_src emacs-lisp
(defun move-beginning-of-line-dwim ()
  (interactive)
  (let* ((orig-point (point))
         (cur-point (beginning-of-visual-line)))
    (when (and
           (= orig-point cur-point)
           (= (line-beginning-position) cur-point))
      (back-to-indentation))))

(global-set-key [remap move-end-of-line] 'end-of-visual-line)
(with-eval-after-load 'evil
  (define-key evil-normal-state-map (kbd "0") 'move-beginning-of-line-dwim)
  (define-key evil-normal-state-map (kbd "$") 'end-of-visual-line))
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-e") 'end-of-visual-line))
#+end_src

** Text scale

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

** Org mode

#+begin_src emacs-lisp
(with-defhydra
 "hydra-org"
 global-map
 (kbd "C-c o")
 ("c" org-capture "capture")
 ("l" org-store-link "storeLink")
 ("L" org-insert-link "insertLink")
 ("j" org-clock-goto "clockGoTo")
 ("a" org-agenda "agenda")
 ("q" nil "quit"))
#+end_src

** Cycle case of word or region

#+begin_src emacs-lisp
(defun xah-toggle-letter-case ()
  "Toggle the letter case of current word or text selection.
Toggles between: all lower, Init Caps, ALL CAPS."
  (interactive)
  (save-excursion
    (let (p1 p2 (deactivate-mark nil) (case-fold-search nil))
      (if (use-region-p)
          (setq p1 (region-beginning) p2 (region-end))
        (let ((bds (bounds-of-thing-at-point 'word)))
          (setq p1 (car bds) p2 (cdr bds))))

      (when (not (eq last-command this-command))
        (save-excursion
          (goto-char p1)
          (cond
           ((looking-at "[[:lower:]][[:lower:]]") (put this-command 'state "all lower"))
           ((looking-at "[[:upper:]][[:upper:]]") (put this-command 'state "all caps"))
           ((looking-at "[[:upper:]][[:lower:]]") (put this-command 'state "init caps"))
           ((looking-at "[[:lower:]]") (put this-command 'state "all lower"))
           ((looking-at "[[:upper:]]") (put this-command 'state "all caps"))
           (t (put this-command 'state "all lower")))))

      (cond
       ((string= "all lower" (get this-command 'state))
        (upcase-region p1 p2)
        (put this-command 'state "all caps"))
       ((string= "all caps" (get this-command 'state))
        (downcase-region p1 p2)
        (upcase-initials-region p1 p2)
        (put this-command 'state "init caps"))
       ((string= "init caps" (get this-command 'state))
        (downcase-region p1 p2)
        (put this-command 'state "all lower"))))))
(global-set-key (kbd "M-u") 'xah-toggle-letter-case)
#+end_src

** Expand region

#+BEGIN_QUOTE
Expand region increases the selected region by semantic units. Just keep
pressing the key until it selects what you want.
#+END_QUOTE

In terminal, *C-=* may not work. You may have to run extended-command-history
to expand or contract region.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** Key Chord mode

Use *jk* key chord to quite everything.
#+begin_src emacs-lisp
(defun evil-exit-emacs-to-normal ()
  (interactive)
  (evil-exit-emacs-state)
  (evil-normal-state))
(setq key-chord-two-keys-delay 0.05)
(eval-after-load 'evil
  `(progn
     (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
     (key-chord-define evil-normal-state-map "jk" 'keyboard-quit)
     (key-chord-define evil-ex-completion-map "jk" 'abort-recursive-edit)
     (key-chord-define evil-emacs-state-map "jk" 'evil-exit-emacs-to-normal)
     (key-chord-define evil-visual-state-map "jk" 'evil-exit-visual-state)))
(key-chord-define minibuffer-local-map "jk" 'minibuffer-keyboard-quit)
(key-chord-define minibuffer-local-ns-map "jk" 'minibuffer-keyboard-quit)
(key-chord-define minibuffer-local-completion-map "jk" 'minibuffer-keyboard-quit)
(key-chord-define minibuffer-local-must-match-map "jk" 'minibuffer-keyboard-quit)
(key-chord-define minibuffer-local-isearch-map "jk" 'minibuffer-keyboard-quit)
(key-chord-mode 1)
#+end_src

I have do some hack with isearch to reproduce the *jk* magic.
#+begin_src emacs-lisp
(defun isearch-enable-key-chord ()
  (key-chord-mode 1)
  (key-chord-define isearch-mode-map "jk" 'isearch-cancel))
(add-hook 'isearch-mode-hook 'isearch-enable-key-chord)
#+end_src

** Super TAB for program modes

#+begin_src emacs-lisp
(setq ac-dwim nil)
;; don't let ac auto start
(setq ac-auto-start nil)
;; so `yas-expand' will return nil if not expanded
(setq yas-fallback-behavior 'return-nil)
;; so snippet can be triggered inside snippet
(setq yas-triggers-in-field t)

(defun tab-for-anything ()
  "Try to `yas-expand', `auto-complete-1', `yas-next-field',
`indent-for-tab-command'."
  (interactive)
  (let* ((bnds (bounds-of-thing-at-point 'symbol))
         (b0 (car bnds))
         (b1 (cdr bnds))
         (p (point)))
    (cond ((and yas-minor-mode
                b0
                b1
                (<= (- p b0) 2)
                (= p b1)
                (yas-expand)))
          ((and auto-complete-mode
                b0
                b1
                (= p b1)
                (auto-complete-1)))
          ((and yas-minor-mode
                (yas--snippets-at-point))
           (when (and (looking-back " ")
                      (looking-at "[\]})\n\[({, ]"))
             (delete-region (1- p) p))
           (yas-next-field))
          (t
           (indent-for-tab-command)))))

(defun ac-expand-common-or-abort ()
  "Refresh `ac-candidates' and expand common part."
  (interactive)
  (ac-update t)
  (ac-expand-common)
  (when (eq 1 (length ac-candidates))
    (ac-abort)))

(defun setup-tab-for-anything ()
  (interactive)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-keymap [(tab)] nil)
  (define-key yas-keymap (kbd "TAB") nil)
  (define-key ac-completing-map "\t" 'ac-expand-common-or-abort)
  (define-key ac-completing-map [tab] 'ac-expand-common-or-abort)
  (local-set-key (read-kbd-macro "TAB") 'tab-for-anything))

(defun disable-tab-for-yas-prog ()
  (interactive)
  (when (derived-mode-p 'prog-mode)
    (define-key yas-keymap [(tab)] nil)
    (define-key yas-keymap (kbd "TAB") nil)))

(defun ac-auto-refresh-candidates ()
  (when (and auto-complete-mode ac-candidates)
    (ac-update t)))

(add-hook 'post-self-insert-hook 'ac-auto-refresh-candidates)
(add-hook 'prog-mode-hook 'setup-tab-for-anything)
(add-hook 'cmake-mode-hook 'setup-tab-for-anything)
(add-hook 'yas-before-expand-snippet-hook 'disable-tab-for-yas-prog)
#+end_src

** Popup

#+begin_src emacs-lisp
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)
#+end_src

** Hungry delete

It's too difficult to combine =hungry delete mode=, =evil mode= and =electric
pair mode=. So share =M-DEL= between [[help:hungry-delete-backward][hungry-delete-backward]] and
[[help:backward-kill-word][backward-kill-word]]. If there are more than one spaces, run
[[help:hungry-delete-backward][hungry-delete-backward]]; otherwise run [[help:backward-kill-word][backward-kill-word]].
#+begin_src emacs-lisp
(setq hungry-delete-chars-to-skip " \t")
(defun backward-kill-word-or-hungry-delete ()
  (interactive)
  (if (looking-back "[ \t\n\r\f\v]\\{2,\\}")
      (call-interactively 'hungry-delete-backward)
    (call-interactively 'backward-kill-word)))
(define-key global-map (kbd "M-DEL") 'backward-kill-word-or-hungry-delete)
#+end_src

** Electric indent mode

In Emacs-24.4, [[help:electric-indent-mode][electric-indent-mode]] works well with [[help:f90-mode][f90-mode]] and
[[help:python-mode][python-mode]]. It will not mesh your indentation anymore. With =electric indent
mode= on, just type =RET= and the current line and the newline will be
indented. You don't have to rebind =RET= to [[help:newline-and-indent][newline-and-indent]].
#+begin_src emacs-lisp
(electric-indent-mode 1)
#+end_src

** Ido mode

+ ido-mode is like magic pixie dust!
+ Sometimes ido can't find a file, just run *M-x ido-reread-directory* or
  *C-l* in minibuffer to refresh ido candidates.
+ Use *C-d* to enter dired from file switching.
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-virtual-buffers t
      ido-auto-merge-work-directories-length -1
      ido-save-directory-list-file (concat starter-kit-dir ".ido.last")
      ido-max-prospects 10
      ido-use-faces nil
      flx-ido-threshold 10000
      ido-use-filename-at-point 'guess)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(ido-ubiquitous-mode 1)
(global-set-key (kbd "C-x C-f") 'ido-find-file)
;; key bindings. For some reason key bindings have to be set in `ido-setup-hook'
(defun ido-setup-key-bindings ()
  (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  (define-key ido-completion-map (kbd "C-p") 'ido-prev-match)
  (define-key ido-completion-map (kbd "C-c C-c") 'ido-restrict-to-matches))
(add-hook 'ido-setup-hook 'ido-setup-key-bindings)
#+end_src

Tell [[help:dired-do-copy][dired-do-copy]] and [[help:dired-do-rename][dired-do-rename]] to use Ido:
#+begin_src emacs-lisp
(put 'dired-do-copy 'ido 'dir)
(put 'dired-do-rename 'ido 'dir)
#+end_src

Don't guess file name in Dired buffer:
#+begin_src emacs-lisp
(defun my/ido-ignore-file-at-point ()
  (when (bound-and-true-p ido-use-filename-at-point)
    (setq-local ido-use-filename-at-point nil)))
(add-hook 'dired-mode-hook #'my/ido-ignore-file-at-point)
#+end_src

Just use *C-o* to invoke in other window, no need to remember the key of
[[help:ido-find-file-other-window][ido-find-file-other-window]] or something like that.
#+begin_src emacs-lisp
(require 'ido-other-window)
#+end_src

** Ace window and ace jump
*** Ace window

Ace window is superior to window numbering for that window numbering shows
number in the mode line which is not friendly to my eyes.
#+begin_src emacs-lisp
(defun ace-window-dwim (&optional arg)
  (interactive "P")
  (cond
   ((equal arg '(4))
    (call-interactively 'ace-delete-window))
   ((equal arg '(16))
    (call-interactively 'ace-maximize-window))
   (t
    (call-interactively 'ace-window))))
(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
(global-set-key (kbd "C-x o") #'ace-window-dwim)
(global-set-key (kbd "M-p") #'ace-window-dwim)
(with-eval-after-load 'dired+
  (define-key dired-mode-map (kbd "M-p") #'ace-window-dwim))
(with-eval-after-load 'magit
  (define-key magit-status-mode-map (kbd "M-p") #'ace-window-dwim)
  (define-key magit-diff-mode-map (kbd "M-p") #'ace-window-dwim))
(with-eval-after-load 'grep
  (define-key grep-mode-map (kbd "M-p") #'ace-window-dwim))
(with-eval-after-load 'compile
  (define-key compilation-mode-map (kbd "M-p") #'ace-window-dwim))
(with-eval-after-load 'git-commit-mode
  (define-key git-commit-mode-map (kbd "M-p") #'ace-window-dwim))
(add-hook 'eshell-mode-hook
          (lambda ()
            (define-key eshell-mode-map (kbd "M-p") #'ace-window-dwim)))
#+end_src

I can't remember connet the number with the direction of window splitting.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x -") #'split-window-below)
(global-set-key (kbd "C-x \\") #'split-window-right)
#+end_src

*** Ace jump

Just press =SPC-w=, the first character of word where you want to go and select
the pop up character, you can move in Emacs quickly. Press *C-x SPE* to jump
back.
#+BEGIN_SRC emacs-lisp
(setq ace-jump-mode-scope 'window)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
(with-eval-after-load 'ace-jump-mode
  (ace-jump-mode-enable-mark-sync))
(progn
  (eval-after-load "info"
    '(define-key Info-mode-map "o" 'ace-link-info))
  (eval-after-load "help-mode"
    '(define-key help-mode-map "o" 'ace-link-help))
  (eval-after-load "eww"
    '(progn
       (define-key eww-link-keymap "o" 'ace-link-eww)
       (define-key eww-mode-map "o" 'ace-link-eww))))
#+END_SRC

** Multiple cursors

#+begin_src emacs-lisp
(with-defhydra-evil-leader
 "hydra-evil-leader-multiple-cursors"
 "mc"
 ("n" mc/mark-next-like-this "next")
 ("p" mc/mark-previous-like-this "previous")
 ("a" mc/mark-all-like-this "all")
 ("l" mc/edit-lines "lines")
 ("q" nil "quit"))
#+end_src
