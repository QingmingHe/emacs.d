#+TITLE: Emacs Starter Auto Complete
#+OPTIONS: toc:2 num:nil ^:nil

* Starter Kit AC
  
** Basic setup
#+BEGIN_SRC emacs-lisp
;; enable ac-gtags in several modes
(when (featurep 'auto-complete-gtags)
  (mapcar
   (lambda (mode)
     (add-to-list 'ac-gtags-modes mode))
   '(f90-mode python-mode)))

;; add several modes to ac-modes so that global-auto-complete-mode can run on
;; these modes
(mapcar
 (lambda (mode)
   (add-to-list 'ac-modes mode))
 '(org-mode text-mode))

;; ac-sources for different languages
(setq-default
 ac-sources
 '(ac-source-abbrev
   ac-source-dictionary
   ac-source-words-in-same-mode-buffers
   ac-source-filename))

;; enable auto complete in all modes
(global-auto-complete-mode t)

(setq ac-use-menu-map t)
(setq ac-use-quick-help t)
(setq ac-dwim t)
;; use TAB to trigger completion
(setq ac-auto-start nil)
(ac-set-trigger-key "TAB")
;; use pos-tip instead of popup to show doc perfectly
(unless *terminal*
  (setq ac-quick-help-prefer-pos-tip t))

;; Don't use fuzzy complete.
;; (require 'fuzzy)
;; (setq ac-fuzzy-enable t)

;;; Key bindings
(define-key ac-mode-map (kbd "M-n") 'auto-complete)
#+END_SRC

** Fortran

#+begin_src emacs-lisp
(add-hook 'f90-mode-hook
          (lambda ()
            (when (featurep 'auto-complete-etags)
              (add-to-list 'ac-sources 'ac-source-etags))
            (when (featurep 'auto-complete-gtags)
              (add-to-list 'ac-sources 'ac-source-gtags))))
#+end_src
   
** Python
   
Jedi is setup in [[~/emacs.d/starter-kit-python.org][starter-kit-python]].

#+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (lambda ()
            (when (featurep 'auto-complete-etags)
              (add-to-list 'ac-sources 'ac-source-etags))
            (when (featurep 'auto-complete-gtags)
              (add-to-list 'ac-sources 'ac-source-gtags))))
#+end_src

** Emacs lisp
   
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq ac-sources
                  (append
                   '(ac-source-features
                     ac-source-functions
                     ac-source-variables
                     ac-source-symbols)
                   ac-sources))))
#+end_src

** Eshell

#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook
          (lambda ()
            (setq ac-sources '(ac-source-pcomplete))))
#+end_src

** CC
*** ac-c-headers

ac-c-headers provide an ac-source for header files and header symbols
completion. Problem with ac-c-headers is it never updates symbols of a
header. So I write a function to update the symbols of a header after saving.
#+begin_src emacs-lisp
(defun my-update-c-headers-symbols ()
  "Update ac-c-headers--symbols-cache after saving header file."
  (when (featurep 'ac-c-headers)
    (let ((header (file-name-nondirectory (buffer-file-name))))
      (when (and
             header
             (string-match-p "\\.\\(h\\|hpp\\)$" header))
        (mapc
         (lambda (h)
           (when (string-match-p (concat header "$") (car h))
             (remove-alist 'ac-c-headers--symbols-cache (car h))
             (ac-c-headers--symbols-update (car h))))
         ac-c-headers--symbols-cache)))))
(add-hook 'c-mode-common-hook
          (lambda ()
            (add-hook 'after-save-hook 'my-update-c-headers-symbols nil t)))
#+end_src

*** cc-search-directories

cc-search-directories are used by find-file.el to find corresponding header of
current source file and ac-c-header to determine where to search the header
files.
#+begin_src emacs-lisp
(setq cc-search-directories '("." "/usr/include"))
(when (file-exists-p "/usr/local/include")
  (add-to-list 'cc-search-directories "/usr/local/include"))
(when (file-exists-p "/opt/include")
  (add-to-list 'cc-search-directories "/opt/include"))
#+end_src

*** ac-clang-flags

ac-clang-flags are extra flags used by ac-source-clang passed to clang to
accomplish completion. Typically include paths. For C, current path is
adequate for most of the cases. For C++, path of standard libraries should be
added.

#+begin_src emacs-lisp
(defun c++-include-paths-general ()
  "Get general C++ include paths."
  (let (p1 p2 c++-include-paths)
    (with-temp-buffer
      (insert (shell-command-to-string "echo \"\" | g++ -v -x c++ -E -"))
      (goto-char (point-min))
      (search-forward "#include <...>")
      (next-line)
      (setq p1 (line-beginning-position))
      (search-forward "# 1")
      (previous-line)
      (previous-line)
      (setq p2 (line-end-position))
      (setq c++-include-paths (split-string (buffer-substring-no-properties p1 p2)))
      (add-to-list 'c++-include-paths "."))
    c++-include-paths))

(when (featurep 'auto-complete-clang)
  (setq ac-clang-flags '("-I."))
  (add-hook 'c++-mode-hook
            (lambda ()
              (make-local-variable 'ac-clang-flags)
              (mapc
               (lambda (item)
                 (add-to-list 'ac-clang-flags (concat "-I" item)))
               (c++-include-paths-general)))))
#+end_src

*** ac-sources

#+begin_src emacs-lisp
(defun my-c-c++-ac-setup ()
  (when (derived-mode-p 'c-mode 'c++-mode)
    (setq ac-sources
          (append
           '(ac-source-c-headers
             ac-source-c-header-symbols)
           ac-sources))
    (when (featurep 'auto-complete-etags)
      (add-to-list 'ac-sources 'ac-source-etags))
    (when (featurep 'auto-complete-gtags)
      (add-to-list 'ac-sources 'ac-source-gtags))
    (when (featurep 'auto-complete-clang)
      (add-to-list 'ac-sources 'ac-source-clang))))
(add-hook 'c-mode-common-hook 'my-c-c++-ac-setup)
#+end_src
