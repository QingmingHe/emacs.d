#+TITLE: Emacs Starter Auto Complete
#+OPTIONS: toc:2 num:nil ^:nil

* Starter Kit AC
** Basic setup
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)

;; add dictionary-dirs
(add-to-list 'ac-dictionary-directories (concat starter-kit-dir "ac-dict"))

;; add several modes to ac-modes so that global-auto-complete-mode can run on
;; these modes
(mapc
 (lambda (mode)
   (add-to-list 'ac-modes mode))
 '(text-mode cmake-mode))

;; default ac-sources: basic ac-sources for all modes
(setq-default
 ac-sources
 '(ac-source-abbrev
   ac-source-dictionary
   ac-source-words-in-same-mode-buffers))

(setq ac-use-menu-map t)
(setq ac-use-quick-help t)
(setq ac-dwim nil)
;; don't let ac auto start
(setq ac-auto-start nil)

;; use pos-tip instead of popup to show doc perfectly
(when (window-system)
  (setq ac-quick-help-prefer-pos-tip t))

;; enable auto complete in all modes
(global-auto-complete-mode t)
(define-key ac-mode-map (kbd "M-n") 'auto-complete)
#+END_SRC

** Super TAB for program modes

#+begin_src emacs-lisp
(defun tab-for-anything ()
  "Try to `yas-expand', `auto-complete-1', `yas-next-field',
`indent-for-tab-command'."
  (interactive)
  (let* ((bnds (bounds-of-thing-at-point 'symbol))
         (b0 (car bnds))
         (b1 (cdr bnds))
         (p (point))
         (yas-fallback-behavior 'return-nil))
    (cond ((and yas-minor-mode
                b0
                b1
                (<= (- p b0) 2)
                (= p b1)
                (yas-expand)))
          ((and auto-complete-mode
                b0
                b1
                (= p b1)
                (auto-complete-1)))
          ((and yas-minor-mode
                (yas--snippets-at-point))
           (when (and (looking-back " ")
                      (looking-at "[\]})\n\[({, ]"))
             (delete-region (1- p) p))
           (yas-next-field))
          (t
           (indent-for-tab-command)))))

(defun ac-expand-common-or-abort ()
  "Refresh `ac-candidates' and expand common part."
  (interactive)
  (ac-update t)
  (ac-expand-common)
  (when (eq 1 (length ac-candidates))
    (ac-abort)))

(defun setup-tab-for-anything ()
  (interactive)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-keymap [(tab)] nil)
  (define-key yas-keymap (kbd "TAB") nil)
  (define-key ac-completing-map "\t" 'ac-expand-common-or-abort)
  (define-key ac-completing-map [tab] 'ac-expand-common-or-abort)
  (local-set-key (read-kbd-macro "TAB") 'tab-for-anything))

(defun disable-tab-for-yas-prog ()
  (interactive)
  (when (derived-mode-p 'prog-mode)
    (define-key yas-keymap [(tab)] nil)
    (define-key yas-keymap (kbd "TAB") nil)))

(add-hook 'prog-mode-hook 'setup-tab-for-anything)
(add-hook 'cmake-mode-hook 'setup-tab-for-anything)
(add-hook 'yas-before-expand-snippet-hook 'disable-tab-for-yas-prog)
#+end_src

** Auto refresh candidates

#+begin_src emacs-lisp
(defun ac-auto-refresh-candidates ()
  (when (and auto-complete-mode ac-candidates)
    (ac-update t)))

(add-hook 'post-self-insert-hook 'ac-auto-refresh-candidates)
#+end_src

** Emacs lisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq ac-sources
                  (append
                   '(ac-source-features
                     ac-source-functions
                     ac-source-variables
                     ac-source-symbols)
                   ac-sources))))
#+end_src

** CC
*** ac-c-headers

ac-c-headers provide an ac-source for header files and header symbols
completion. Problem with ac-c-headers is it never updates symbols of a
header. So I write a function to update the symbols of a header after saving.
#+begin_src emacs-lisp
(defun my-update-c-headers-symbols ()
  "Update ac-c-headers--symbols-cache for headers that match current buffer."
  (mapc
   (lambda (h)
     (when (string-match-p
            (concat (file-name-nondirectory (buffer-file-name)) "\\'")
            (car h))
       (remove-alist 'ac-c-headers--symbols-cache (car h))
       (ac-c-headers--symbols-update (car h))))
   ac-c-headers--symbols-cache))

(defun my-add-c-h-to-hook ()
  "Add my-update-c-headers-symbols to after-save-hook if is header file."
  (let ((fname (buffer-file-name)))
    (when (and
           fname
           (derived-mode-p 'c-mode 'c++-mode)
           (string-match-p "\\.\\(h\\|hpp\\)\\'" fname))
      (add-hook 'after-save-hook 'my-update-c-headers-symbols nil t))))

(add-hook 'c-mode-hook 'my-add-c-h-to-hook)
(add-hook 'c++-mode-hook 'my-add-c-h-to-hook)
#+end_src

*** cc-search-directories

cc-search-directories are used by find-file.el to find corresponding header of
current source file and ac-c-header to determine where to search the header
files.
#+begin_src emacs-lisp
(setq cc-search-directories '("." "/usr/include"))
(when (file-exists-p "/usr/local/include")
  (add-to-list 'cc-search-directories "/usr/local/include"))
(when (file-exists-p "/opt/include")
  (add-to-list 'cc-search-directories "/opt/include"))
#+end_src

*** ac-clang-flags

ac-clang-flags are extra flags used by ac-source-clang passed to clang to
accomplish completion. Typically include paths. For C, current path is
adequate for most of the cases. For C++, path of standard libraries should be
added.

#+begin_src emacs-lisp
(with-eval-after-load 'cc-mode
  (when (executable-find "clang")
    (require 'auto-complete-clang)
    (add-hook 'c++-mode-hook 'add-c++-include-paths-general)
    (add-hook 'c-mode-hook 'add-c-include-paths-general)))

(defun add-c-include-paths-general ()
  (setq-local ac-clang-flags (prj/c-include-paths-general "c")))

(defun add-c++-include-paths-general ()
  (setq-local ac-clang-flags (prj/c-include-paths-general "c++")))
#+end_src

*** ac-sources

#+begin_src emacs-lisp
(defun my-c-c++-ac-setup ()
  (when (derived-mode-p 'c-mode 'c++-mode)
    (when (featurep 'auto-complete-clang)
      (add-to-list 'ac-sources 'ac-source-clang))
    (setq ac-sources
          (append
           ac-sources
           '(ac-source-c-headers
             ac-source-c-header-symbols)))))
(add-hook 'c-mode-hook 'my-c-c++-ac-setup)
(add-hook 'c++-mode-hook 'my-c-c++-ac-setup)
#+end_src

** CMake

#+begin_src emacs-lisp
(with-eval-after-load 'cmake-mode
  (when (executable-find "cmake")
    (require 'auto-complete-cmake)
    (add-hook 'cmake-mode-hook
              (lambda ()
                (add-to-list 'ac-sources 'ac-source-cmake)))))
#+end_src

** Jedi Completion

Never used rope, ropemacs, pymacs ... They are ugly too slow. The newly
emerging [[https://github.com/davidhalter/jedi][jedi]] is a better choice, though it is almost impossible to install
manually. Or you can just enable company mode or auto-complete instead of
setup jedi.

To install jedi manually:
#+BEGIN_SRC sh :tangle no
  pip install jedi
  pip install epc
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'python
  (if (eq 0 (call-process-shell-command
             "python -c \"import jedi;import epc\""
             nil nil nil))
      (setq jedi-is-installed t)
    (setq jedi-is-installed nil))
  (when jedi-is-installed
    ;; show doc by popup is too annoying, just show in minibuffer
    (setq jedi:tooltip-method nil)
    (setq jedi:complete-on-dot t)
    (cond ((file-directory-p (expand-file-name ".python-environments" starter-kit-dir))
           nil)
          ((executable-find "jediepcserver.py")
           (setq jedi:server-command
                 `(,(executable-find "python") ,(executable-find "jediepcserver.py"))))
          (t
           (setq jedi:server-command
                 `(,(executable-find "python")
                   ,(expand-file-name
                     "jediepcserver.py"
                     (file-name-directory (locate-library "jedi")))))))))

(defun my-jedi-python-setup ()
  (when jedi-is-installed
    (jedi:setup)))
(add-hook 'python-mode-hook 'my-jedi-python-setup)
#+END_SRC

** Comment
*** Key bindings
+ After completion menu popped up, use *C-s* to search in candidates.
+ Use *C-M-n* and *C-M-p* to scroll down and up in quick help.
+ *C-M-?* to persist ac-help which may be useful when help page is too long or
  you want to get help when filling arguments of the function.
