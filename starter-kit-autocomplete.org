#+TITLE: Emacs Starter Auto Complete
#+OPTIONS: toc:2 num:nil ^:nil

* Starter Kit AC
** Basic setup
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(when (executable-find "clang")
  (require 'auto-complete-clang))

;; add dictionary-dirs
(add-to-list 'ac-dictionary-directories (concat starter-kit-dir "ac-dict"))

;; add several modes to ac-modes so that global-auto-complete-mode can run on
;; these modes
(mapc
 (lambda (mode)
   (add-to-list 'ac-modes mode))
 '(text-mode cmake-mode))

;; default ac-sources: basic ac-sources for all modes
(setq-default
 ac-sources
 '(ac-source-abbrev
   ac-source-dictionary
   ac-source-words-in-same-mode-buffers
   ac-source-filename))

(setq ac-use-menu-map t)
(setq ac-use-quick-help t)

;; use pos-tip instead of popup to show doc perfectly
(when (window-system)
  (setq ac-quick-help-prefer-pos-tip t))

;; enable auto complete in all modes
(global-auto-complete-mode t)
#+END_SRC

** TODO Super TAB

I want to use =TAB= for these things:

#+begin_src emacs-lisp
(setq ac-dwim nil)
(setq ac-auto-start nil)
(ac-set-trigger-key nil)
(setq yas-fallback-behavior 'return-nil)
(eval-after-load 'yasnippet
  `(progn
     (define-key yas-minor-mode-map (kbd "<tab>") nil)
     (define-key yas-minor-mode-map (kbd "TAB") nil)))

(defun tab-expand-or-ac ()
  (interactive)
  (let* ((bnds (bounds-of-thing-at-point 'symbol))
         (b0 (car bnds))
         (b1 (cdr bnds))
         (p (point)))
    (cond ((and b0
                b1
                (<= (- p b0) 2)
                (= p b1)
                (yas-expand)))
          ((and b0
                b1
                (= p b1)
                (auto-complete-1 :triggers 'trigger-key)))
          ((yas--snippets-at-point)
           (when (looking-back " ")
             (backward-delete-char))
           (yas-next-field))
          (t
           (indent-according-to-mode)))))

(defun ac-refresh-candidates ()
  (interactive)
  (ac-update t)
  (ac-expand-common)
  (when (eq 1 (length ac-candidates))
    (ac-abort)))

(define-key ac-completing-map "\t" 'ac-refresh-candidates)
(define-key ac-completing-map [tab] 'ac-refresh-candidates)
(define-key ac-mode-map (kbd "M-n") 'auto-complete)
(define-key ac-mode-map [tab] 'tab-expand-or-ac)
#+end_src

** Fortran

Use project-ac-etags which is set up itself.

** Emacs lisp

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq ac-sources
                  (append
                   '(ac-source-features
                     ac-source-functions
                     ac-source-variables
                     ac-source-symbols)
                   ac-sources))))
#+end_src

** CC
*** ac-c-headers

ac-c-headers provide an ac-source for header files and header symbols
completion. Problem with ac-c-headers is it never updates symbols of a
header. So I write a function to update the symbols of a header after saving.
#+begin_src emacs-lisp
(defun my-update-c-headers-symbols ()
  "Update ac-c-headers--symbols-cache for headers that match current buffer."
  (mapc
   (lambda (h)
     (when (string-match-p
            (concat (file-name-nondirectory (buffer-file-name)) "\\'")
            (car h))
       (remove-alist 'ac-c-headers--symbols-cache (car h))
       (ac-c-headers--symbols-update (car h))))
   ac-c-headers--symbols-cache))

(defun my-add-c-h-to-hook ()
  "Add my-update-c-headers-symbols to after-save-hook if is header file."
  (let ((fname (buffer-file-name)))
    (when (and
           fname
           (derived-mode-p 'c-mode 'c++-mode)
           (string-match-p "\\.\\(h\\|hpp\\)\\'" fname))
      (add-hook 'after-save-hook 'my-update-c-headers-symbols nil t))))

(add-hook 'c-mode-hook 'my-add-c-h-to-hook)
(add-hook 'c++-mode-hook 'my-add-c-h-to-hook)
#+end_src

*** cc-search-directories

cc-search-directories are used by find-file.el to find corresponding header of
current source file and ac-c-header to determine where to search the header
files.
#+begin_src emacs-lisp
(setq cc-search-directories '("." "/usr/include"))
(when (file-exists-p "/usr/local/include")
  (add-to-list 'cc-search-directories "/usr/local/include"))
(when (file-exists-p "/opt/include")
  (add-to-list 'cc-search-directories "/opt/include"))
#+end_src

*** ac-clang-flags

ac-clang-flags are extra flags used by ac-source-clang passed to clang to
accomplish completion. Typically include paths. For C, current path is
adequate for most of the cases. For C++, path of standard libraries should be
added.

#+begin_src emacs-lisp
(when (featurep 'auto-complete-clang)
  (add-hook 'c++-mode-hook 'add-c++-include-paths-general)
  (add-hook 'c-mode-hook 'add-c-include-paths-general))

(defun add-c-include-paths-general ()
  (setq-local ac-clang-flags (prj/c-include-paths-general "c")))

(defun add-c++-include-paths-general ()
  (setq-local ac-clang-flags (prj/c-include-paths-general "c++")))
#+end_src

*** ac-sources

#+begin_src emacs-lisp
(defun my-c-c++-ac-setup ()
  (when (derived-mode-p 'c-mode 'c++-mode)
    (when (featurep 'auto-complete-clang)
      (add-to-list 'ac-sources 'ac-source-clang))
    (setq ac-sources
          (append
           ac-sources
           '(ac-source-c-headers
             ac-source-c-header-symbols)))))
(add-hook 'c-mode-hook 'my-c-c++-ac-setup)
(add-hook 'c++-mode-hook 'my-c-c++-ac-setup)
#+end_src

** CMake

#+begin_src emacs-lisp
(when (executable-find "cmake")
  (eval-after-load "cmake-mode"
    `(progn
       (require 'auto-complete-cmake)
       (add-hook 'cmake-mode-hook
                 (lambda ()
                   (add-to-list 'ac-sources 'ac-source-cmake))))))
#+end_src

** Comment
*** Key bindings
+ After completion menu popped up, use *C-s* to search in candidates.
+ Use *C-M-n* and *C-M-p* to scroll down and up in quick help.
+ *C-M-?* to persist ac-help which may be useful when help page is too long or
  you want to get help when filling arguments of the function.

** Built in completion

#+begin_src emacs-lisp
(setq completion-ignore-case t)
#+end_src

** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
(when (boundp 'hippie-expand-try-functions-list)
  (delete 'try-expand-line hippie-expand-try-functions-list)
  (delete 'try-expand-list hippie-expand-try-functions-list))
#+end_src
