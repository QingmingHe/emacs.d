#+TITLE: Emacs Starter Auto Complete
#+OPTIONS: toc:2 num:nil ^:nil

* Starter Kit AC

** Basic setup
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(require 'auto-complete-clang)
(require 'auto-complete-etags)
(require 'auto-complete-gtags)
(mapcar
 (lambda (mode)
   (add-to-list 'ac-gtags-modes mode))
 '(f90-mode python-mode))
(add-to-list 'ac-dictionary-directories "~/.emacs.d/elpa/auto-complete-20140322.321/dict")
;; add several modes to ac-modes so that global-auto-complete-mode can run on
;; these modes
(mapcar
 (lambda (mode)
   (add-to-list 'ac-modes mode))
 '(org-mode text-mode))
;; ac-sources for different languages
(add-hook 'f90-mode-hook
          '(lambda ()
             (setq ac-sources
                   (append
                    '(ac-source-yasnippet ac-source-gtags ac-source-etags)
                    ac-sources))))
(add-hook 'python-mode-hook
          '(lambda ()
             (setq ac-sources
                   (append
                    '(ac-source-yasnippet ac-source-gtags ac-source-etags)
                    ac-sources))))
(add-hook 'c-mode-common-hook
          '(lambda ()
             (setq ac-sources
                   (append
                    '(ac-source-yasnippet ac-source-gtags ac-source-etags)
                    ac-sources))
             (when (executable-find "clang")
               (add-to-list 'ac-sources 'ac-source-clang))))
(add-hook 'emacs-lisp-mode-hook
          '(lambda ()
             (setq ac-sources
                   (append
                    '(ac-source-yasnippet ac-source-gtags ac-source-etags)
                    ac-sources))))
(add-hook 'org-mode-hook
          '(lambda ()
             (setq ac-sources
                   (append
                    '(ac-source-yasnippet ac-source-files-in-current-dir ac-source-filename)
                    ac-sources))))
(add-hook 'text-mode-hook
          '(lambda ()
             (setq ac-sources
                   (append
                    '(ac-source-files-in-current-dir ac-source-filename)
                    ac-sources))))
(ac-config-default)

(setq ac-use-menu-map t)
(setq ac-use-quick-help t)
(setq ac-dwim t)
;; use TAB to trigger completion
(setq ac-auto-start nil)
(ac-set-trigger-key "TAB")
;; use pos-tip instead of popup to show doc perfectly
(unless *terminal*
  (require 'pos-tip)
  (setq ac-quick-help-prefer-pos-tip t))

;; Don't use fuzzy complete.
;; (require 'fuzzy)
;; (setq ac-fuzzy-enable t)

;;; Key bindings
(define-key ac-mode-map (kbd "M-n") 'auto-complete)
#+END_SRC

** Set up for Backends
*** Clang for C and C++
Add include path, which can be obtained by *echo "" | g++ -v -x c++ -E -*, to
ac-clang backend.
#+BEGIN_SRC emacs-lisp
(defun get-c-include-path ()
  (with-temp-buffer
    (insert (shell-command-to-string "echo \"\" | g++ -v -x c++ -E -"))
    (goto-char (point-min))
    (search-forward "#include <...>")
    (next-line)
    (setq p1 (line-beginning-position))
    (search-forward "# 1")
    (previous-line)
    (previous-line)
    (setq p2 (line-end-position))
    (setq c-include-paths (split-string (buffer-substring-no-properties p1 p2)))
    (add-to-list 'c-include-paths ".")))

(setq ac-clang-flags
      (mapcar (lambda (item)(concat "-I" item))
              (get-c-include-path)))
#+END_SRC
