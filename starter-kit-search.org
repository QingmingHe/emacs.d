#+TITLE: Starter Kit Search
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Search

Include =isearch=, =replace=, =grep=, =occur= and so on.

** Grep
*** Key bindings

#+begin_src emacs-lisp
(defun grep-display-error-dwim ()
  (interactive)
  (compile-goto-error)
  (other-window -1))

(eval-after-load "grep"
  `(progn
     (define-key grep-mode-map (kbd "C-c C-c") 'wgrep-change-to-wgrep-mode)
     (define-key grep-mode-map (kbd "e") 'wgrep-change-to-wgrep-mode)
     (define-key grep-mode-map (kbd "j") 'compilation-next-error)
     (define-key grep-mode-map (kbd "k") 'compilation-previous-error)
     (define-key grep-mode-map (kbd "d") 'compilation-display-error-dwim)))
#+end_src

*** Grep set up

#+begin_src emacs-lisp
(setq grep-highlight-matches t)
#+end_src

*** Grep ignore directories and files

Don't grep repositories and some files.
#+BEGIN_SRC emacs-lisp
(eval-after-load "grep"
  `(progn
     (dolist (dir '(".git"
                    ".cvs"
                    ".svn"
                    ".hg"))
       (add-to-list 'grep-find-ignored-directories dir))
     (dolist (file '("#*"
                     "*.mod"))
       (add-to-list 'grep-find-ignored-files file))))
#+END_SRC

*** Wgrep

#+begin_src emacs-lisp
(setq wgrep-auto-save-buffer t)
(with-eval-after-load 'wgrep
  (define-key wgrep-mode-map (kbd "C-c C-c") 'wgrep-finish-edit))
(defun wgrep-disable-emacs-state ()
  (evil-emacs-state -1))
(add-hook 'wgrep-setup-hook 'wgrep-disable-emacs-state)
(defadvice wgrep-to-original-mode (before wgrep-enable-emacs-state activate)
  (evil-emacs-state 1))
#+end_src

** anzu and evil anzu

#+begin_src emacs-lisp
(setq anzu-deactivate-region t)
(eval-after-load 'evil
  `(require 'evil-anzu))
(global-anzu-mode +1)
(global-set-key (kbd "M-%") 'anzu-query-replace-regexp)
#+end_src

** Incremental search
*** Instantly highlight all matches

#+begin_src emacs-lisp
(setq lazy-highlight-initial-delay 0.1)
#+end_src

*** Use regexp search by default

+ *C-s* to repeat search
+ *C-y* to yank and *M-y* to cycle kill ring
+ *C-o* to call occur
#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "\C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

*** Activate occur and swoop easily inside isearch

#+begin_src emacs-lisp
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp
                 isearch-string
               (regexp-quote isearch-string))))))
(define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
#+end_src

*** Isearch yank do what I mean

*C-w* is originally bound to =isearch-yank-word-or-char= which incrementally
yank thing after cursor. This is always not I mean. What I want is to yank
selected region or symbol at point. Besides, the cursor should be placed at
end of the match string at point for forward searching or beginning of the
match for backward searching rather than the next match. This can also
mimic [[help:highlight-symbol-at-point][highlight-symbol-at-point]].
#+begin_src emacs-lisp
(defun isearch-yank-dwim ()
  (interactive)
  (let (str p p0 p1)
    (if (region-active-p)
        (progn
          (setq p0 (region-beginning))
          (setq p1 (region-end))
          (setq str (regexp-quote (buffer-substring-no-properties p0 p1)))
          (keyboard-escape-quit))
      (setq p (bounds-of-thing-at-point 'symbol))
      (setq p0 (car p))
      (setq p1 (cdr p))
      (setq
       str
       (format
        "\\_<%s\\_>"
        (regexp-quote (buffer-substring-no-properties p0 p1)))))
    (if isearch-forward
        (goto-char p0)
      (goto-char p1))
    (setq isearch-regexp t
          isearch-string str
          isearch-message
          (mapconcat 'isearch-text-char-description isearch-string ""))
    (isearch-search-and-update)))
(define-key isearch-mode-map (kbd "C-w") 'isearch-yank-dwim)
#+end_src

*** Evil replace from isearch

#+begin_src emacs-lisp
(defun evil-replace-from-isearch ()
  (interactive)
  (let ((from-str
         (if isearch-regexp
             isearch-string
           (regexp-quote isearch-string))))
    (isearch-exit)
    (evil-ex (concat "%s/" from-str))))
(define-key isearch-mode-map (kbd "M-%") 'evil-replace-from-isearch)
#+end_src

*** Pinyin search and other

#+begin_src emacs-lisp
(define-key isearch-mode-map "\C-p" #'isearch-toggle-pinyin)
(define-key isearch-mode-map "\C-g" #'isearch-cancel)
#+end_src

*** Isearch and ace jump

+ If last command is a evil search command, *go* will go to one of the matching
  data. Otherwise ask for beginning character of a word and go there.
+ *gl* go to line
+ *gj* go to window. Why not *gw*, because *gj* is much easier to press.
#+begin_src emacs-lisp
(defun ace-word-from-input-or-search ()
  (interactive)
  (unless (featurep 'avy-jump)
    (require 'avy-jump))
  (if (or
       (eq last-command 'evil-search-next)
       (eq last-command 'evil-search-previous)
       (eq last-command 'evil-search-word-forward)
       (eq last-command 'evil-search-word-backward))
      (let* ((candidates (avi--regex-candidates isearch-string))
             (avi-background nil)
             (candidate
              (avi--process candidates #'avi--overlay-post)))
        (avi--goto candidate))
    (call-interactively #'ace-jump-word-mode)))
(with-eval-after-load 'evil
  (define-key evil-normal-state-map (kbd "gl") 'ace-jump-line-mode)
  (define-key evil-normal-state-map (kbd "gj") 'ace-window)
  (define-key evil-normal-state-map (kbd "go") 'ace-word-from-input-or-search))
(define-key isearch-mode-map (kbd ";") 'avi-isearch)
#+end_src

Push mark before jump.
#+begin_src emacs-lisp
(defadvice avi--goto (before push-mark-before-avi--goto activate)
  (push-mark))
#+end_src

*** Isearch delete fail characters or one character

#+begin_src emacs-lisp
(defun isearch-del-fail-or-char ()
  (interactive)
  (if (= 0 (length isearch-string))
      (progn
        (ding)
        (message "No more isearch string: "))
    (setq isearch-string
          (substring
           isearch-string
           0
           (or (isearch-fail-pos) (1- (length isearch-string))))
          isearch-message
          (mapconcat 'isearch-text-char-description isearch-string ""))
    (when isearch-other-end (goto-char isearch-other-end))
    (isearch-search)
    (isearch-push-state)
    (isearch-update)))

(define-key isearch-mode-map (kbd "<backspace>") 'isearch-del-fail-or-char)
(define-key isearch-mode-map "\177" 'isearch-del-fail-or-char)
#+end_src

** Occur
*** Occur do what I mean

+ Push region or symbol at point to regexp-history so that occur will set the
  default regexp as what's been pushed.
+ It's better recenter window after goto or display occur. Just do a little
  hack by =defadvice=.

#+begin_src emacs-lisp
(defun occur-dwim ()
  (interactive)
  (let (thing)
    (setq thing
          (if (region-active-p)
              (buffer-substring-no-properties
               (region-beginning)
               (region-end))
            (thing-at-point-no-properties 'symbol)))
    (when thing
      (push thing regexp-history)))
  (call-interactively 'occur))
(defadvice occur-mode-goto-occurrence (after omgo-after activate)
  (recenter))
(defadvice occur-mode-goto-occurrence-other-window (after omgoow-after activate)
  (recenter))
(defun occur-display-dwim ()
  (interactive)
  (occur-mode-goto-occurrence-other-window)
  (other-window -1))
#+end_src

*** Key bindings

#+begin_src emacs-lisp
(define-key occur-mode-map (kbd "j") 'occur-next)
(define-key occur-mode-map (kbd "k") 'occur-prev)
(define-key occur-mode-map (kbd "d") 'occur-display-dwim)
#+end_src

** Tips
*** Combine Dired with replace

First to mark with regexp *%m* in Dired. Then press *Q* to do
[[help:dired-do-query-replace-regexp][dired-do-query-replace-regexp]]. You can see what you want happens.

*** Insert newline in minibuffer (replace)

Press *C-q C-j* where *C-q* for [[help:quoted-insert][quoted-insert]] and *C-j* for a
newline. However, I think a better idea is to copy text and yank into the
minibuffer.
