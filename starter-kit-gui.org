#+TITLE: Starter Kit Gui
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Gui
** All kinds of preferences
#+begin_src emacs-lisp
(setq visible-bell t
      echo-keystrokes 0.1
      font-lock-maximum-decoration t
      transient-mark-mode t
      color-theme-is-global t
      delete-by-moving-to-trash t
      shift-select-mode nil
      truncate-partial-width-windows nil
      uniquify-buffer-name-style 'forward
      whitespace-style '(trailing lines space-before-tab
                                  indentation space-after-tab
                                  empty)
      whitespace-line-column 100
      ediff-window-setup-function 'ediff-setup-windows-plain
      oddmuse-directory (concat starter-kit-dir "oddmuse")
      xterm-mouse-mode t)
#+end_src

** Line number in terminal

There is no fringe in terminal and it's hard to distinguish line number and
code if there is no margin between. Approach as follows just mimic the fringe
in GUI Emacs.
#+begin_src emacs-lisp
(unless window-system
  (defun set-linum-format-str ()
    (setq-local linum-format-fmt
                (let ((w (length (number-to-string
                                  (count-lines (point-min) (point-max))))))
                  (concat "%" (number-to-string w) "d"))))

  (add-hook 'linum-before-numbering-hook 'set-linum-format-str)

  (defun linum-format-fn (line)
    (concat
     (propertize (format linum-format-fmt line) 'face 'linum)
     (propertize " " 'face 'secondary-selection)))

  (setq linum-format 'linum-format-fn))
#+end_src

** Rainbow delimiters

I use rainbow-delimiters in editing latex or lisp. But in most of the time, I
don't need it.
#+begin_src emacs-lisp
(with-eval-after-load 'rainbow-delimiters
  (require 'color)

  ;; using stronger colors
  (cl-loop
   for index from 1 to rainbow-delimiters-max-face-count
   do
   (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
     (cl-callf color-saturate-name (face-foreground face) 30)))

  ;; making unmatched parens stand out more
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'error
                      :strike-through t))
#+end_src

** Window numbering

Changing from one window to another is so easy in Emacs with window number,
you just key in *M-n* to jump to n-th window numbered by the plugin.
#+BEGIN_SRC emacs-lisp
(window-numbering-mode 1)
#+END_SRC

** Emacs Layout

Set Emacs split to horizontal by default.
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 160)
#+END_SRC

** All kinds of bars

You really don't need this; trust me.
#+begin_src emacs-lisp
(menu-bar-mode -1)
(column-number-mode 1)
(when window-system
  (setq frame-title-format '(buffer-file-name "%f" (:eval default-directory)))
  (blink-cursor-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))
#+end_src

** UTF-8 coding system

#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

** Diminish minor modes

The minor mode list is too long and occupy all the mode line. I want to know
other data on the mode line.
#+BEGIN_SRC emacs-lisp
(eval-after-load "undo-tree"               '(diminish 'undo-tree-mode))
(eval-after-load "flyspell"                '(diminish 'flyspell-mode))
(eval-after-load "auto-complete"           '(diminish 'auto-complete-mode))
(eval-after-load "eldoc"                   '(diminish 'eldoc-mode))
(eval-after-load "magit"                   '(diminish 'magit-auto-revert-mode))
(eval-after-load "smartparens"             '(diminish 'smartparens-mode))
(with-eval-after-load 'cdlatex
  (diminish 'org-cdlatex-mode)
  (diminish 'cdlatex-mode))
(eval-after-load "outline"                 '(diminish 'outline-minor-mode))
(eval-after-load "abbrev"                  '(diminish 'abbrev-mode))
(eval-after-load "highlight-indentation"   '(diminish 'highlight-indentation-current-column-mode))
(eval-after-load "hideshow"                '(diminish 'hs-minor-mode))
(eval-after-load "whitespace-cleanup-mode" '(diminish 'whitespace-cleanup-mode))
(eval-after-load "fic-mode"                '(diminish 'fic-mode))
(eval-after-load "yasnippet"               '(diminish 'yas-minor-mode))
(eval-after-load "anzu"                    '(diminish 'anzu-mode))
(eval-after-load "key-combo"               '(diminish 'key-combo-mode))
(eval-after-load "simple"                  '(diminish 'visual-line-mode))
(eval-after-load "simple"                  '(diminish 'auto-fill-function))
#+END_SRC

** Font for English and Chinese

#+BEGIN_SRC emacs-lisp :tangle no
(set-face-attribute 'default (selected-frame) :height 120)
(when (window-system)
  (catch 'en-font-found
    (mapc
     (lambda (ft)
       (when (x-list-fonts ft)
         (set-face-attribute
          'default nil :font ft)
         (throw 'en-font-found ft)))
 '("Inconsolata" "Consolas")))
  (catch 'zh-font-found
    (mapc
     (lambda (ft)
       (when (x-list-fonts ft)
         (dolist (charset '(kana han symbol cjk-misc bopomofo))
           (set-fontset-font (frame-parameter nil 'font)
                             charset
                             (font-spec :family ft :size 14)))
         (throw 'zh-font-found ft)))
     '("WenQuanYi Micro Hei Mono" "Microsoft Yahei"))))
#+END_SRC

#+begin_src emacs-lisp
(when (window-system)
  (require 'chinese-fonts-setup))
#+end_src

*** Install font
**** Windows

Open Windows explorer and enter =C:\WINDOWS\fonts= -> file -> install new font
-> click the font file.

**** Linux

+ Install fontconfig.
+ Copy font file to =~/.fonts/=.
+ Shell command: fc-cache ~/.fonts/

*** TODO WenQuanYi

WenQuanYi can be installed by fontconfig but Emacs can't recognize it.
(x-list-fonts "WenQuanYi Micro Hei") returns nil.

** Fringe

#+BEGIN_SRC emacs-lisp
(when (window-system)
  (fringe-mode '(4 . 0)))
#+END_SRC

** Zenburn

#+begin_src emacs-lisp
(load-theme 'zenburn t)
#+end_src
