#+TITLE: Starter Kit Gui
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Gui
** All kinds of preferences
#+begin_src emacs-lisp
(setq visible-bell t
      echo-keystrokes 0.1
      font-lock-maximum-decoration t
      transient-mark-mode t
      color-theme-is-global t
      delete-by-moving-to-trash t
      shift-select-mode nil
      truncate-partial-width-windows nil
      uniquify-buffer-name-style 'forward
      whitespace-style '(trailing lines space-before-tab
                                  indentation space-after-tab
                                  empty)
      whitespace-line-column 100
      ediff-window-setup-function 'ediff-setup-windows-plain
      oddmuse-directory (concat starter-kit-dir "oddmuse")
      xterm-mouse-mode t)
#+end_src

** Rainbow delimiters

I use rainbow-delimiters in editing latex or lisp. But in most of the time, I
don't need it.
#+begin_src emacs-lisp
(with-eval-after-load 'rainbow-delimiters
  (require 'color)

  ;; using stronger colors
  (cl-loop
   for index from 1 to rainbow-delimiters-max-face-count
   do
   (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
     (cl-callf color-saturate-name (face-foreground face) 30)))

  ;; making unmatched parens stand out more
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'error
                      :strike-through t))
#+end_src

** Window numbering

Changing from one window to another is so easy in Emacs with window number,
you just key in *M-n* to jump to n-th window numbered by the plugin.
#+BEGIN_SRC emacs-lisp
(window-numbering-mode 1)
#+END_SRC

** Highlight indentation

#+begin_src emacs-lisp
(require 'highlight-indentation)
#+end_src

** Emacs Layout

It's not easy to recognize the completion words in horizontally split window
if two windows are already split horizontally. Therefore set Emacs to split
vertically by default.
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 160)
#+END_SRC

** All kinds of bars

You really don't need this; trust me.
#+begin_src emacs-lisp
(menu-bar-mode -1)
(column-number-mode 1)
(when window-system
  (setq frame-title-format '(buffer-file-name "%f" (:eval default-directory)))
  (blink-cursor-mode -1)
  (scroll-bar-mode 0)
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))
#+end_src

** UTF-8 coding system

#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

** Diminish minor modes

The minor mode list is too long and occupy all the mode line. I want to know
other data on the mode line.
#+BEGIN_SRC emacs-lisp
(eval-after-load "undo-tree"               '(diminish 'undo-tree-mode))
(eval-after-load "flyspell"                '(diminish 'flyspell-mode))
(eval-after-load "auto-complete"           '(diminish 'auto-complete-mode))
(eval-after-load "eldoc"                   '(diminish 'eldoc-mode))
(eval-after-load "magit"                   '(diminish 'magit-auto-revert-mode))
(eval-after-load "smartparens"             '(diminish 'smartparens-mode))
(with-eval-after-load 'cdlatex
  (diminish 'org-cdlatex-mode)
  (diminish 'cdlatex-mode))
(eval-after-load "outline"                 '(diminish 'outline-minor-mode))
(eval-after-load "abbrev"                  '(diminish 'abbrev-mode))
(eval-after-load "highlight-indentation"   '(diminish 'highlight-indentation-current-column-mode))
(eval-after-load "hideshow"                '(diminish 'hs-minor-mode))
(eval-after-load "whitespace-cleanup-mode" '(diminish 'whitespace-cleanup-mode))
(eval-after-load "fic-mode"                '(diminish 'fic-mode))
(eval-after-load "yasnippet"               '(diminish 'yas-minor-mode))
(eval-after-load "anzu"                    '(diminish 'anzu-mode))
(diminish 'auto-fill-function)
#+END_SRC

** Font for English and Chinese

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default (selected-frame) :height 120)
(when (window-system)
  (catch 'en-font-found
    (mapc
     (lambda (ft)
       (when (x-list-fonts ft)
         (set-face-attribute
          'default nil :font ft)
         (throw 'en-font-found ft)))
 '("Inconsolata" "Consolas")))
  (catch 'zh-font-found
    (mapc
     (lambda (ft)
       (when (x-list-fonts ft)
         (dolist (charset '(kana han symbol cjk-misc bopomofo))
           (set-fontset-font (frame-parameter nil 'font)
                             charset
                             (font-spec :family ft :size 14)))
         (throw 'zh-font-found ft)))
     '("WenQuanYi Micro Hei Mono" "Microsoft Yahei"))))
#+END_SRC

*** Install font
**** Windows

Open Windows explorer and enter =C:\WINDOWS\fonts= -> file -> install new font
-> click the font file.

**** Linux

+ Install fontconfig.
+ Copy font file to =~/.fonts/=.
+ Shell command: fc-cache ~/.fonts/

*** TODO WenQuanYi

WenQuanYi can be installed by fontconfig but Emacs can't recognize it.
(x-list-fonts "WenQuanYi Micro Hei") returns nil.

** Fringe

#+BEGIN_SRC emacs-lisp
(when (window-system)
  (fringe-mode '(4 . 0)))
#+END_SRC

** Power line
   :PROPERTIES:
   :tangle:   no
   :END:

My powerline theme based on powerline-default-theme.
#+begin_src emacs-lisp
(defun powerline-my-theme ()
  "Setup my mode-line."
  (interactive)
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (let* ((active (powerline-selected-window-active))
                          (mode-line (if active 'mode-line 'mode-line-inactive))
                          (face2 (if active 'powerline-active1 'powerline-inactive1))
                          (face1 (if active 'powerline-active2 'powerline-inactive2))
                          (separator-left (intern (format "powerline-%s-%s"
                                                          powerline-default-separator
                                                          (car powerline-default-separator-dir))))
                          (separator-right (intern (format "powerline-%s-%s"
                                                           powerline-default-separator
                                                           (cdr powerline-default-separator-dir))))
                          (lhs (list (powerline-raw "%*" face2 'l)
                                     (powerline-buffer-size face2 'l)
                                     (powerline-raw mode-line-mule-info face2 'l)
                                     (powerline-buffer-id face2 'l)
                                     (when (and (boundp 'which-func-mode) which-func-mode)
                                       (powerline-raw which-func-format face2 'l))
                                     (powerline-raw " " face2)
                                     (funcall separator-left face2 face1)
                                     (when (boundp 'erc-modified-channels-object)
                                       (powerline-raw erc-modified-channels-object face1 'l))
                                     (powerline-major-mode face1 'l)
                                     (powerline-process face1)
                                     (powerline-minor-modes face1 'l)
                                     (powerline-narrow face1 'l)
                                     (powerline-raw " " face1)
                                     (funcall separator-left face1 face2)
                                     (powerline-vc face2 'r)))
                          (rhs (list (powerline-raw global-mode-string face2 'r)
                                     (funcall separator-right face2 face1)
                                     (powerline-raw "%4l" face1 'l)
                                     (powerline-raw ":" face1 'l)
                                     (powerline-raw "%3c" face1 'r)
                                     (funcall separator-right face1 face2)
                                     (powerline-raw " " face2)
                                     (powerline-raw "%6p" face2 'r))))
                     (concat (powerline-render lhs)
                             (powerline-fill face2 (powerline-width rhs))
                             (powerline-render rhs)))))))
#+end_src

** Zenburn

#+begin_src emacs-lisp
(load-theme 'zenburn t)
(set-face-background 'highlight-indentation-current-column-face "#4F4F4F")
#+end_src

** Solarized theme
   :PROPERTIES:
   :tangle: no
   :END:

[[https://github.com/bbatsov/solarized-emacs][Solarized theme here]] seems better than [[https://github.com/sellout/emacs-color-theme-solarized][this one]].
#+begin_src emacs-lisp
(defadvice load-theme (around starter-kit-load-theme disable)
  ad-do-it
  (set-face-attribute 'mode-line nil
                      :foreground "cyan"
                      :box nil
                      :underline nil
                      :inverse-video nil)
  (set-face-attribute 'mode-line-inactive nil
                      :box nil
                      :underline nil
                      :inverse-video nil)
  (require 'powerline)
  (powerline-my-theme))

(defun starter-kit-solarized-emacs-setup ()
  ;; make the fringe stand out from the background
  (setq solarized-distinct-fringe-background t)
  ;; not make the modeline high contrast
  (setq solarized-high-contrast-mode-line nil)
  ;; Use less bolding
  (setq solarized-use-less-bold t)
  ;; Use more italics
  (setq solarized-use-more-italic t)
  ;; Use less colors for indicators such as git:gutter, flycheck and similar.
  (setq solarized-emphasize-indicators nil)

  ;; font-size changes
  (setq solarized-scale-org-headlines nil)
  (setq solarized-height-minus-1 0.8)
  (setq solarized-height-plus-1 1.1)
  (setq solarized-height-plus-2 1.15)
  (setq solarized-height-plus-3 1.2)
  (setq solarized-height-plus-4 1.3)

  (setq x-underline-at-descent-line t)

  (ad-enable-advice 'load-theme 'around 'starter-kit-load-theme)
  (ad-activate 'load-theme)

  (load-theme 'solarized-dark t))

(starter-kit-solarized-emacs-setup)
#+end_src
** Old solarized theme
   :PROPERTIES:
   :tangle: no
   :END:

Emacs24 has build in support for saving and loading themes.

A Theme builder is available at http://elpa.gnu.org/themes/ along with
a list of pre-built themes at http://elpa.gnu.org/themes/view.html and
themes are available through ELPA.

Downloaded themes may be saved to the =themes/= directory in the base
of the starter kit which ignored by git.  Once downloaded and
evaluated a theme is activated using the =load-theme= function.

#+BEGIN_SRC emacs-lisp
(color-theme-initialize)
(if (or (not (window-system)) (string= "light" (getenv "EMACS_COLOR_THEME")))
    (progn (color-theme-solarized-light)
           (set-face-background 'highlight-indentation-face "#073642")
           (set-face-background 'highlight-indentation-current-column-face "#eee8d5"))
  (progn (color-theme-solarized-dark)
         (set-face-background 'highlight-indentation-face "#073642")
         (set-face-background 'highlight-indentation-current-column-face "#073642")))
#+END_SRC

Load powerline after color theme is set. If you change the color theme in
running emacs, the expressions as follows should be re-evaluated.
#+BEGIN_SRC emacs-lisp
(require 'powerline)
(set-face-attribute 'mode-line nil
                    :background "dim gray"
                    :foreground "cyan"
                    :inverse-video nil
                    :box nil
                    :underline nil)
(set-face-attribute 'mode-line-inactive nil
                    :background "dim gray"
                    :foreground "light gray"
                    :inverse-video nil
                    :box nil
                    :underline nil)
#+END_SRC
