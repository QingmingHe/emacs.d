#+TITLE: Starter Kit Lisp
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Lisp
Support for editing list dialects including [[* Emacs Lisp][Emacs Lisp]], [[* Scheme][Scheme]],
[[* Common Lisp][Common Lisp]], and [[* Clojure][Clojure]].

** Define keys
   :PROPERTIES:
   :CUSTOM_ID: keys
   :END:
#+name: starter-kit-define-lisp-keys
#+begin_src emacs-lisp
(with-eval-after-load 'lisp-mode
  (define-key lisp-interaction-mode-map (kbd "C-x C-j") 'eval-print-last-sexp)
  (define-key emacs-lisp-mode-map (kbd "C-x C-j") 'eval-last-sexp))
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-x C-j") 'eval-last-sexp))
#+end_src

** Emacs Lisp
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp
   :END:

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("Cask\\'" . emacs-lisp-mode))
(defun my-emacs-lisp-config ()
  (turn-on-eldoc-mode)
  (starter-kit-remove-elc-on-save))

(defun starter-kit-remove-elc-on-save ()
  "If you're saving an elisp file, likely the .elc is no longer valid."
  (add-hook 'after-save-hook
            (lambda ()
              (if (file-exists-p (concat buffer-file-name "c"))
                  (delete-file (concat buffer-file-name "c"))))
            nil t))

(add-hook 'emacs-lisp-mode-hook 'my-emacs-lisp-config)
#+end_src

** Clojure
   :PROPERTIES:
   :CUSTOM_ID: clojure
   :TANGLE:   no
   :END:

#+begin_src emacs-lisp
  (define-key clojure-mode-map (kbd "C-c v") 'slime-eval-buffer)
  (define-key clojure-mode-map (kbd "C-c C-v") 'slime-eval-buffer)

  (defface starter-kit-clojure-trace-face
     '((((class color) (background dark))
        (:foreground "grey50"))
       (((class color) (background light))
        (:foreground "grey55")))
     "Face used to dim parentheses."
     :group 'starter-kit-faces)

  (setq starter-kit-clojure-trace-face 'starter-kit-clojure-trace-face)

  ;; This will make relevant lines stand out more in stack traces
  (defun sldb-font-lock ()
    (font-lock-add-keywords nil
                            '(("[0-9]+: \\(clojure\.\\(core\\|lang\\).*\\)"
                               1 starter-kit-clojure-trace-face)
                              ("[0-9]+: \\(java.*\\)"
                               1 starter-kit-clojure-trace-face)
                              ("[0-9]+: \\(swank.*\\)"
                               1 starter-kit-clojure-trace-face)
                              ("\\[\\([A-Z]+\\)\\]"
                               1 font-lock-function-name-face))))

  (add-hook 'sldb-mode-hook 'sldb-font-lock)

  (defun slime-jump-to-trace (&optional on)
    "Jump to the file/line that the current stack trace line references.
  Only works with files in your project root's src/, not in dependencies."
    (interactive)
    (save-excursion
      (beginning-of-line)
      (search-forward-regexp "[0-9]: \\([^$(]+\\).*?\\([0-9]*\\))")
      (let ((line (string-to-number (match-string 2)))
            (ns-path (split-string (match-string 1) "\\."))
            (project-root (locate-dominating-file default-directory "src/")))
        (find-file (format "%s/src/%s.clj" project-root
                           (mapconcat 'identity ns-path "/")))
        (goto-line line))))

  (eval-after-load 'slime
    '(progn
       (defalias 'sldb-toggle-details 'slime-jump-to-trace)
       (defun sldb-prune-initial-frames (frames)
         "Show all stack trace lines by default."
         frames)))

  (eval-after-load 'find-file-in-project
    '(add-to-list 'ffip-patterns "*.clj"))

  (defun clojure-project (path)
    "Setup classpaths for a clojure project and starts a new SLIME session.

  Kills existing SLIME session, if any."
    (interactive (list
                  (ido-read-directory-name
                   "Project root: "
                   (locate-dominating-file default-directory "pom.xml"))))
    (when (get-buffer "*inferior-lisp*")
      (kill-buffer "*inferior-lisp*"))
    (add-to-list 'swank-clojure-extra-vm-args
                 (format "-Dclojure.compile.path=%s"
                         (expand-file-name "target/classes/" path)))
    (setq swank-clojure-binary nil
          swank-clojure-jar-path (expand-file-name "target/dependency/" path)
          swank-clojure-extra-classpaths
          (append (mapcar (lambda (d) (expand-file-name d path))
                          '("src/" "target/classes/" "test/"))
                  (let ((lib (expand-file-name "lib" path)))
                    (if (file-exists-p lib)
                        (directory-files lib t ".jar$"))))
          slime-lisp-implementations
          (cons `(clojure ,(swank-clojure-cmd) :init swank-clojure-init)
                (remove-if #'(lambda (x) (eq (car x) 'clojure))
                           slime-lisp-implementations)))
    (save-window-excursion
      (slime)))

#+end_src

#+results:
: clojure-project

** Scheme
   :PROPERTIES:
   :CUSTOM_ID: scheme
   :END:

#+begin_src emacs-lisp
(with-eval-after-load 'scheme
  (catch 'scheme-found
    (mapc
     (lambda (prog)
       (when (executable-find prog)
         (setq scheme-program-name prog)
         (throw 'scheme-found prog)))
     '("guile" "racket" "csi"))))

(defun kh/get-scheme-proc-create ()
  "Create one scheme process if no one is created."
  (unless (and scheme-buffer
               (get-buffer scheme-buffer)
               (comint-check-proc scheme-buffer))
    (save-window-excursion
      (run-scheme scheme-program-name))))

(defun kh/scheme-send-last-sexp ()
  "A replacement of original `scheme-send-last-sexp':
1. check if scheme process exists, otherwise create one
2. run `scheme-send-last-sexp'

PS: this function is inspired by Wang Yin."
  (interactive)
  (kh/get-scheme-proc-create)
  (scheme-send-last-sexp))

(eval-after-load "scheme"
  `(define-key scheme-mode-map (kbd "C-x C-j") 'kh/scheme-send-last-sexp))
#+end_src

** Common Lisp
   :PROPERTIES:
   :CUSTOM_ID: common-lisp
   :TANGLE:   no
   :END:

TODO
