#+TITLE: Starter Kit Dired
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Dired
** How dired presents
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-lAh1v --group-directories-first")
(eval-after-load "dired"
  `(progn
     (require 'dired+)
     ;; Emacs 24.4+
     (when (fboundp 'dired-hide-details-mode)
       (global-dired-hide-details-mode t))))
#+END_SRC

- l: Is the only mandatory one.
- A: Means to list all files but . and ...
- G: Don't show group information. These days, when there are more laptops
  than people, the group info is rarely useful.
- h: Human readable sizes, such as M for mebibytes.
- 1v: Affects the sorting of digits, hopefully in a positive way.
- --group-directories-first: self-explanatory, I like to have the directories
  on the top, separate from the files.

** Basic settings

#+BEGIN_SRC emacs-lisp
;; try to guess destination
(setq dired-dwim-target t)
;; use the same buffer for viewing dir, instead of spawning many
(put 'dired-find-alternate-file 'disabled nil)
;; copy, remove files asynchronous. It's a pitty that `dired-async` don't
;; support tramp well.
;; (eval-after-load "dired-aux"
;;   '(require 'dired-async))
#+END_SRC

** Enhanced Dired key bindings

Key bindings should be set after loading dired+.
#+begin_src emacs-lisp
(eval-after-load "dired+"
  `(progn
     (define-key dired-mode-map (kbd "RET")
       (lambda ()
         "If file name at current line in Dired is a directory, visit the
directory in the same Dired buffer; otherwise visit the file in another buffer
with the Dired buffer preserved."
         (interactive)
         (let ((file (dired-get-file-for-visit)))
           (if (file-directory-p file)
               (dired-find-alternate-file)
             (find-file file)))))
     (define-key dired-mode-map (kbd "^")
       (lambda ()
         "Goto parent directory in current Dired buffer with cursor locating
at line of last directory."
         (interactive)
         (let ((last-path (file-name-directory (dired-get-file-for-visit))))
           (find-alternate-file "..")
           (dired-goto-file last-path))))
     (define-key dired-mode-map (kbd "j")
       (lambda ()
         "Original `dired-goto-file' can't jump to directory in Dired
buffer. This command uses ido to complete read a file or directory name from
all files and directories under current path and jump to it in current Dired
buffer."
         (interactive)
         (dired-goto-file
          (expand-file-name
           (ido-completing-read
            "Goto file or dir: "
            (directory-files "."))))))
     (define-key dired-mode-map (kbd "<f5>") 'dired-hide-details-mode)))
#+end_src

** Find name Dired

+ Use [[elisp:find-name-dired]] instead of [[elisp:find-dired]] for the former's
  simplicity.
+ By default Emacs will pass *-exec* to find and that makes it very slow. It is
  better to collate the matches and then use *xargs* to run the command. To do
  this instead add this to your =~/.emacs=:
#+begin_src emacs-lisp
(setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))
#+end_src

** Ido Dired and move to file's line

#+begin_src emacs-lisp
(defun ido-dired-dwim ()
  "Call `ido-dired' and move to last file's line in Dired buffer if possible."
  (interactive)
  (let* ((file-name (buffer-file-name))
         (dir-name (if file-name
                       (expand-file-name (file-name-directory file-name))
                     "")))
    (call-interactively 'ido-dired)
    (when (string= dir-name (expand-file-name default-directory))
      (dired-goto-file file-name))))
(define-key global-map (kbd "C-x d") 'ido-dired-dwim)
#+end_src

** Tips
*** key bindings
- *w* copies file name to ring. *C-u 0 w* copies full path.
- *!* run shell command, *&* run shell command synchronously.
