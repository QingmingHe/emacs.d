#+TITLE: Starter Kit Browser
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Browser
** w3m

#+BEGIN_QUOTE
w3m is a text-based web browser as well as a pager like `more' or `less'. With
w3m you can browse web pages through a terminal emulator window (xterm, rxvt
or something like that). Moreover, w3m can be used as a text formatting tool
which typesets HTML into plain text.
#+END_QUOTE

*** Basic configuration

#+BEGIN_SRC emacs-lisp
(if (executable-find "w3m")
    (progn
      (require 'w3m)
      (setq w3m-command "w3m")
      (setq browse-url-browser-function 'w3m-browse-url)
      (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
      (setq w3m-use-cookies t)
      (setq w3m-home-page "https://www.google.com.hk")
      (setq w3m-coding-system 'utf-8
            w3m-file-coding-system 'utf-8
            w3m-file-name-coding-system 'utf-8
            w3m-input-coding-system 'utf-8
            w3m-output-coding-system 'utf-8
            w3m-terminal-coding-system 'utf-8)
      (add-to-list 'w3m-search-engine-alist
                   '("DuckDuck Go" "http://www.duckduckgo.com/?q=%s"))
      (setq w3m-search-default-engine "google"))
  (message "w3m is not installed!"))
#+END_SRC

*** Key bindings

#+begin_src emacs-lisp
(when (executable-find "w3m")
  (define-key w3m-mode-map (kbd "<") 'beginning-of-buffer)
  (define-key w3m-mode-map (kbd ">") 'end-of-buffer))
#+end_src

*** How to install

- Install mew, apel and flim from melpa.
- Install w3m form melpa.
- Error during compilation for lack of Mule-UCS. Don't care it, Mule-UCS is
  obsolete.

*** Usage
+ To copy url: *w3m-print-current-url*

**** Select search engine

call [[elisp:w3m-search][w3m-search]] with a prefix.

**** w3m cannot retrieve url

[[elisp:w3m-reload-this-page][w3m-reload-this-page]] or type *R*.

** eww
*** Key bindings

#+begin_src emacs-lisp
(when (fboundp 'eww)
  (define-key eww-mode-map "B" 'eww-back-url)
  (define-key eww-mode-map "b" 'scroll-down-command)
  (define-key eww-mode-map "j" 'next-line)
  (define-key eww-mode-map "k" 'previous-line)
  (define-key eww-mode-map (kbd "<") 'beginning-of-buffer)
  (define-key eww-mode-map (kbd ">") 'end-of-buffer))
#+end_src
