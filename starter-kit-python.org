#+TITLE: Starter Kit Python
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter kit Python

Support for the Python programming language.

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them.
#+begin_src emacs-lisp
;;  (starter-kit-install-if-needed 'python-mode 'ipython)
#+end_src

** Completion
Never used rope, ropemacs, pymacs ... They are ugly too slow. The newly
emerging [[https://github.com/davidhalter/jedi][jedi]] is a better choice, though it is almost impossible to install
manually. Or you can just enable company mode or auto-complete instead of
setup jedi.

To install jedi manually:
#+BEGIN_SRC sh
  pip install jedi
  pip install epc
#+END_SRC

To use my configuration, set JEDI_SERVER environment to be
/path/to/jediepcserver.py.
#+BEGIN_SRC emacs-lisp
(defun my-jedi-conf ()
  (jedi:setup)
  (setq jedi:setup-keys t)
  (setq jedi:complete-on-dot t)
  )

(defun my-jedi-setup ()
  (interactive)
  (if (file-directory-p "~/.emacs.d/.python-environments")
      (my-jedi-conf)
    (if (getenv "JEDI_SERVER")
        (progn (setq jedi:server-command
                     `(,(executable-find "python") ,(getenv "JEDI_SERVER")))
               (my-jedi-conf))
      (if (executable-find "jediepcserver.py")
          (progn
            (setq jedi:server-command
                  `(,(executable-find "jediepcserver.py")))
            (my-jedi-conf))))))
#+END_SRC

** Use Python's python-mode.el instead of Emacs' python.el
   :PROPERTIES:
   :CUSTOM_ID: python
   :END:
Replace the Python mode that comes with Emacs by the Python mode
supplied by the Python distribution itself.
#+begin_src emacs-lisp
;; (require 'python-mode)
;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;; (add-to-list 'interpreter-mode-alist '("python" . python-mode))
#+end_src

** Configuration for python mode
Flyspell is used to check spelling in comment; outline mode is used to fold
code blocks, which is realised by defining key words like *def*, *class* and
so on and you can add your own key words.
#+BEGIN_SRC emacs-lisp
(defun my-python-conf ()
  (flyspell-prog-mode)
  (yas-minor-mode)
  (unless (member (file-name-nondirectory (buffer-file-name))
                  '("SConstruct" "SConscript"))
    (flycheck-mode))
  (outline-minor-mode)
  (setq outline-regexp " *\\(def \\|class \\|if __name__\\)")
  (auto-fill-mode)
  (my-jedi-setup)
  (project-minor-mode)
  (highlight-indentation-mode)
  ;; it's too heavy taste
  ;;(highlight-indentation-current-column-mode)
  )
(add-hook 'python-mode-hook 'my-python-conf)
#+END_SRC

** Use Cython mode
   :PROPERTIES:
   :CUSTOM_ID: cython
   :END:
#+begin_src emacs-lisp
  (when (require 'cython-mode nil 'no-error)
    (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
    (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
    (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode)))
#+end_src

** Set up for Sconstruct
[[http://www.scons.org/][SCons]] is a software construction tool written in python. The /input card/ or
/script/ for SCons is *SConstruct*, which can be treated as Python script.
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
      (append '(("SConstruct\\'" . python-mode)
		("SConscript\\'" . python-mode))
              auto-mode-alist))
#+END_SRC

** IPython set up
   
Activate IPython in ansi-term.
#+BEGIN_SRC emacs-lisp
(defun my-ipython ()
  "Activate IPython shell"
  (interactive)
  ;; Get buffer index
  (setq my-ipython-shell-index 0)
  (while (get-buffer (format "*IPython <%d>*" my-ipython-shell-index))
    (setq my-ipython-shell-index (+ 1 my-ipython-shell-index)))
  ;; Create new ansi term
  (ansi-term "ipython" (format "IPython <%d>" my-ipython-shell-index))
  (switch-to-buffer (format "*IPython <%d>*" my-ipython-shell-index))
  )
#+END_SRC

