#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them. Other dependencies are provided by Emacs 24.
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'magit)
#+end_src

** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp 
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (blink-cursor-mode -1)
    (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))
  
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  
  (setq visible-bell t
        echo-keystrokes 0.1
        font-lock-maximum-decoration t
        inhibit-startup-message t
        transient-mark-mode t
        color-theme-is-global t
        delete-by-moving-to-trash t
        shift-select-mode nil
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab)
        whitespace-line-column 100
        ediff-window-setup-function 'ediff-setup-windows-plain
        oddmuse-directory (concat starter-kit-dir "oddmuse")
        xterm-mouse-mode t
        save-place-file (concat starter-kit-dir "places"))
#+end_src

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Save a list of recent files visited.
#+begin_src emacs-lisp 
(recentf-mode 1)
#+end_src emacs-lisp

** Handle parens
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp 
(require 'smartparens-config)
(require 'rainbow-delimiters)
(show-paren-mode 1)
(smartparens-global-mode t)
;; (show-smartparens-global-mode)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** ido mode
ido-mode is like magic pixie dust!
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp 
(ido-mode t)
(ido-everywhere t)
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point nil
      ido-use-virtual-buffers t
      ido-auto-merge-work-directories-length -1
      ido-max-prospects 10)
(require 'flx-ido)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)
#+end_src

** Other, spell checking, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)
  
  (defvar starter-kit-coding-hook nil
    "Hook that gets run on activation of any programming mode.")
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)
#+end_src

*** functions for prettier source code
#+begin_src emacs-lisp
(defun starter-kit-pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

*** possible issues/resolutions with flyspell
Most of the solution came from [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki-FlySpell]].  Here is one
possible fix.

**** Emacs set path to aspell
it's possible aspell isn't in your path
#+begin_src emacs-lisp :tangle no
   (setq exec-path (append exec-path '("/opt/local/bin")))
#+end_src

**** Emacs specify spelling program
- This didn't work at first, possibly because cocoAspell was
  building its dictionary.  Now it seems to work fine.
#+begin_src emacs-lisp :tangle no
  (setq ispell-program-name "aspell"
        ispell-dictionary "english"
        ispell-dictionary-alist
        (let ((default '("[A-Za-z]" "[^A-Za-z]" "[']" nil
                         ("-B" "-d" "english" "--dict-dir"
                          "/Library/Application Support/cocoAspell/aspell6-en-6.0-0")
                         nil iso-8859-1)))
          `((nil ,@default)
            ("english" ,@default))))
#+end_src

** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
  (when (boundp 'hippie-expand-try-functions-list)
    (delete 'try-expand-line hippie-expand-try-functions-list)
    (delete 'try-expand-list hippie-expand-try-functions-list))
#+end_src

** Backup files
Rather than saving backup files scattered all over the file system,
let them live in the =backups/= directory inside of the starter kit.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name
                                        (concat starter-kit-dir "backups"))))
      backup-by-copying t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
#+end_src

** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

** Cosmetics

#+begin_src emacs-lisp
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))

(eval-after-load 'magit
  '(progn
     (set-face-foreground 'magit-diff-add "green3")
     (set-face-foreground 'magit-diff-del "red3")))
#+end_src

** Dired

#+BEGIN_SRC emacs-lisp
(require 'dired)
(require 'dired-x)
;; set diredp-hide-details-initially-flag before load dired+
(setq diredp-hide-details-initially-flag t)
(require 'dired+)
;; use <f5> to toggle details
(define-key dired-mode-map (kbd "<f5>") 'dired-hide-details-mode)
;; try to guess destination
(setq dired-dwim-target t)
;; use the same buffer for viewing dir, instead of spawning many
(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
(define-key dired-mode-map (kbd "^") #'(lambda ()
                                         (interactive)
                                         (find-alternate-file "..")))
#+END_SRC

** Bookmark

#+BEGIN_SRC emacs-lisp
(require 'bookmark+)
(setq bmkp-bmenu-state-file (expand-file-name "~/.emacs.d/.emacs-bmk-bmenu-state.el"))
#+END_SRC

** Always auto revert file
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Enable erase buffer
#+BEGIN_SRC emacs-lisp
(put 'erase-buffer 'disabled nil)
#+END_SRC

** Font size
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default (selected-frame) :height 120)
#+END_SRC
   
** Font for English and Chinese
  
The author use emacs by "emacs -nw" and let the terminal handle the fonts. Or
the English font will be Consolas and Chinese font be Microsoft Yahei.

#+BEGIN_SRC emacs-lisp
(when (not *terminal*)
  (progn
    (set-face-attribute
     'default nil :font "Consolas")
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
                        charset
                        (font-spec :family "Microsoft Yahei" :size 14)))
    )
  )
#+END_SRC

** Emacs Layout
The toolbar and scroll bar are too ugly and disable it.
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode 0)
(column-number-mode 1)
#+END_SRC

It's not easy to recognise the completion words in horizontally split window
if two windows are already split horizontally. Therefore set Emacs to split
vertically by default.
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 160)
#+END_SRC

** Line number

Use relative line number. Set linum-relative-current-symbol to be empty string
so that linum-relative will show the real line number at current line.
#+BEGIN_SRC emacs-lisp
(require 'linum-relative)
(setq linum-relative-current-symbol "")
#+END_SRC

** 80 Column Rule
It's a good habit to obey to 80 column rule. In the convenience of adding
continuation marker in code such as Fortran, two columns are spared.
#+BEGIN_SRC emacs-lisp
(setq default-fill-column 78)
#+END_SRC

** Disable recentering
   For smooth scrolling and disabling the auto-recentering of emacs screen when
moving cursor. Set scroll margin to be 4 so that an ape can see the following
lines of codes.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000
      auto-window-vscroll nil)
(setq scroll-margin 4)
#+END_SRC

** Color theme
Emacs24 has build in support for saving and loading themes.

A Theme builder is available at http://elpa.gnu.org/themes/ along with
a list of pre-built themes at http://elpa.gnu.org/themes/view.html and
themes are available through ELPA.

Downloaded themes may be saved to the =themes/= directory in the base
of the starter kit which ignored by git.  Once downloaded and
evaluated a theme is activated using the =load-theme= function.

#+BEGIN_SRC emacs-lisp
(require 'color-theme)
(require 'color-theme-molokai)
(require 'highlight-indentation)
(color-theme-initialize)
(if *terminal*
    (progn (color-theme-solarized-dark)
           (set-face-background 'highlight-indentation-face "#073642")
           (set-face-background 'highlight-indentation-current-column-face "#c3b3b3"))
  (progn (color-theme-solarized-dark)
         (set-face-background 'highlight-indentation-face "#073642")
         (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")))
;; Color for color-theme-solarized-light
;; (set-face-background 'highlight-indentation-face "#e3e3d3")
;; (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")
#+END_SRC
** New line and indent
#+BEGIN_SRC emacs-lisp 
(define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Undo is needed by evil
#+BEGIN_SRC emacs-lisp 
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC
   
** Expand region

#+BEGIN_QUOTE
Expand region increases the selected region by semantic units. Just keep
pressing the key until it selects what you want.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
** Garbage collection
   
Emacs GC is time consuming for that Emacs will initiate GC every 0.76 MB. We
set it to be 20 MB to save time.
#+BEGIN_SRC emacs-lisp 
(setq gc-cons-threshold 20000000)
#+END_SRC

** Grep

Don't grep repositories.
#+BEGIN_SRC emacs-lisp 
(eval-after-load 'grep
  '(dolist (dir '(".git"
                  ".cvs"
                  ".svn"
                  ".hg"))
     (add-to-list 'grep-find-ignored-directories dir)))
#+END_SRC
** Multi shell
   
Multi eshell is not eshell but shell.
#+BEGIN_SRC emacs-lisp
(require 'multi-eshell)
;;(require 'multi-term)
;;(setq multi-term-program "/usr/bin/bash")
#+END_SRC
** Window numbering

Changing from one window to another is so easy in Emacs with window number,
you just key in *M-n* to jump to n-th window numbered by the plugin.
#+BEGIN_SRC emacs-lisp
(require 'window-numbering)
(window-numbering-mode 1)
#+END_SRC
