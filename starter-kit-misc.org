#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc
Things that don't fit anywhere else.

** Menu bar, scroll bar, column number
You really don't need this; trust me.
#+name: starter-kit-no-menu
#+begin_src emacs-lisp
(menu-bar-mode -1)
(scroll-bar-mode 0)
(column-number-mode 1)
#+end_src

** Ensure server safe in windows

On Windows and Cygwin, errors of /some/path/ is unsafe often occur. So
redefine server-ensure-safe-dir function to suppress this kind of error.
Besides, you should make =server-socket-dir= directory manually or server
cannot start. After server started, summon Emacs in terminal by:
#+begin_src sh :tangle no
emacsclient -t FILE
#+end_src

#+BEGIN_SRC emacs-lisp
(require 'server)
(when *cygwin*
  (defun server-ensure-safe-dir (dir) "Noop" t)
  (unless (file-exists-p server-socket-dir)
    (mkdir server-socket-dir)))
(unless (server-running-p)
  (server-start))
#+END_SRC

** Diminish minor modes

The minor mode list is too long and occupy all the mode line. I want to know
other data on the mode line.
#+BEGIN_SRC emacs-lisp
(eval-after-load "undo-tree"               '(diminish 'undo-tree-mode))
(eval-after-load "flyspell"                '(diminish 'flyspell-mode))
(eval-after-load "auto-complete"           '(diminish 'auto-complete-mode))
(eval-after-load "eldoc"                   '(diminish 'eldoc-mode))
(eval-after-load "magit"                   '(diminish 'magit-auto-revert-mode))
(eval-after-load "smartparens"             '(diminish 'smartparens-mode))
(eval-after-load "cdlatex"                 '(diminish 'org-cdlatex-mode))
(eval-after-load "outline"                 '(diminish 'outline-minor-mode))
(eval-after-load "abbrev"                  '(diminish 'abbrev-mode))
(eval-after-load "highlight-indentation"   '(diminish 'highlight-indentation-current-column-mode))
(eval-after-load "hideshow"                '(diminish 'hs-minor-mode))
(eval-after-load "whitespace-cleanup-mode" '(diminish 'whitespace-cleanup-mode))
(eval-after-load "fic-mode"                '(diminish 'fic-mode))
(eval-after-load "yasnippet"               '(diminish 'yas-minor-mode))
(diminish 'auto-fill-function)
#+END_SRC

** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (blink-cursor-mode -1)
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))

  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (setq visible-bell t
        echo-keystrokes 0.1
        font-lock-maximum-decoration t
        inhibit-startup-message t
        transient-mark-mode t
        color-theme-is-global t
        delete-by-moving-to-trash t
        shift-select-mode nil
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        whitespace-style '(trailing lines space-before-tab
                                    indentation space-after-tab
                                    empty)
        whitespace-line-column 100
        ediff-window-setup-function 'ediff-setup-windows-plain
        oddmuse-directory (concat starter-kit-dir "oddmuse")
        xterm-mouse-mode t)
#+end_src

** Winner mode
Winner mode enables you goto previous windows configuration easily.
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Save places in opened files

When you visit a file, point goes to the last place where it was when you
previously visited the same file.
#+BEGIN_SRC emacs-lisp
(setq-default save-place t)
(setq save-place-file (concat starter-kit-dir ".saved-places"))
(require 'saveplace)
#+END_SRC

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Save a list of recent files visited.
#+begin_src emacs-lisp
(setq recentf-max-saved-items 1000)
(recentf-mode 1)
#+end_src

** Ido mode
+ ido-mode is like magic pixie dust!
+ Sometimes ido can't find a file, just run *M-x ido-reread-directory* or
  *C-l* in minibuffer to refresh ido candidates.
#+srcname: starter-kit-loves-ido-mode
#+begin_src emacs-lisp
(require 'ido)
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point nil
      ido-use-virtual-buffers t
      ido-auto-merge-work-directories-length -1
      ido-save-directory-list-file (concat starter-kit-dir ".ido.last")
      ido-max-prospects 10)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
;; key bindings. For some reason key bindings have to be set in `ido-setup-hook'
(defun ido-setup-key-bindings ()
  (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
(add-hook 'ido-setup-hook 'ido-setup-key-bindings)
#+end_src

** Tabs, alias, random
#+begin_src emacs-lisp
(set-default 'indent-tabs-mode nil)
(set-default 'indicate-empty-lines t)

(defalias 'yes-or-no-p 'y-or-n-p)
(defalias 'gc 'magit-commit)
;; Seed the random-number generator
(random t)
#+end_src

** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
  (when (boundp 'hippie-expand-try-functions-list)
    (delete 'try-expand-line hippie-expand-try-functions-list)
    (delete 'try-expand-list hippie-expand-try-functions-list))
#+end_src

** Backup files

Rather than saving backup files scattered all over the file system, let them
live in the =/tmp= directory.
#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq version-control t
      delete-old-versions t
      backup-by-copying t
      kept-old-versions 2
      kept-new-versions 6)
#+end_src

** Cosmetics

#+begin_src emacs-lisp
(eval-after-load 'diff-mode
  '(progn
     (set-face-foreground 'diff-added "green4")
     (set-face-foreground 'diff-removed "red3")))

(eval-after-load 'magit
  '(progn
     (set-face-foreground 'magit-diff-add "green3")
     (set-face-foreground 'magit-diff-del "red3")))
#+end_src

** Bookmark

#+BEGIN_SRC emacs-lisp
(setq bmkp-bmenu-state-file (expand-file-name "~/.emacs.d/.emacs-bmk-bmenu-state.el"))
#+END_SRC

** Always auto revert file
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Enable erase buffer
#+BEGIN_SRC emacs-lisp
(put 'erase-buffer 'disabled nil)
#+END_SRC

** 80 Column Rule
It's a good habit to obey to 80 column rule. In the convenience of adding
continuation marker in code such as Fortran, two columns are spared.
#+BEGIN_SRC emacs-lisp
(setq default-fill-column 78)
#+END_SRC

** Disable recentering
   For smooth scrolling and disabling the auto-recentering of emacs screen when
moving cursor. Set scroll margin to be 4 so that an ape can see the following
lines of codes.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000
      auto-window-vscroll nil)
(setq scroll-margin 4)
#+END_SRC

** New line and indent
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

** Garbage collection

Emacs GC is time consuming for that Emacs will initiate GC every 0.76 MB. We
set it to be 20 MB to save time.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

** Compile and grep
*** Auto save
Save buffers before compile automatically.
#+BEGIN_SRC emacs-lisp
(setq compilation-ask-about-save nil)
#+END_SRC

*** Auto show subtree
Grep buffer use =compile-goto-error= to locate. The problem is this function
will not auto expand folding after go to due buffer and point which is
annoying in org mode. Advice below is for:
1. Switch window and then switch back to set current buffer to be buffer of
   current file. It's may be a bug that =compile-goto-error= will set current
   buffer to be the *compilation* or *grep* buffer.
2. Determine whether invisible or not and show subtree if invisible.
3. Recenter window.

#+begin_src emacs-lisp
(defadvice compile-goto-error (after cge-after activate)
  (other-window 1)
  (other-window -1)
  (when (outline-invisible-p)
    (show-subtree))
  (recenter))
#+end_src

*** Key bindings

#+begin_src emacs-lisp
(defun compilation-display-error-dwim ()
  (interactive)
  (compile-goto-error)
  (other-window -1))

(eval-after-load "grep"
  `(progn
     (define-key grep-mode-map (kbd "j") 'compilation-next-error)
     (define-key grep-mode-map (kbd "k") 'compilation-previous-error)
     (define-key grep-mode-map (kbd "d") 'compilation-display-error-dwim)))
(eval-after-load "compile"
  `(progn
     (define-key compilation-mode-map (kbd "j") 'compilation-next-error)
     (define-key compilation-mode-map (kbd "k") 'compilation-previous-error)
     (define-key compilation-mode-map (kbd "d") 'compilation-display-error-dwim)))
#+end_src

*** Grep set up

#+begin_src emacs-lisp
(setq grep-highlight-matches t)
#+end_src

*** Grep ignore directories and files

Don't grep repositories and some files.
#+BEGIN_SRC emacs-lisp
(eval-after-load "grep"
  `(progn
     (dolist (dir '(".git"
                    ".cvs"
                    ".svn"
                    ".hg"))
       (add-to-list 'grep-find-ignored-directories dir))
     (dolist (file '("#*"
                     "*.mod"))
       (add-to-list 'grep-find-ignored-files file))))
#+END_SRC

*** Wgrep

#+begin_src emacs-lisp
(setq wgrep-auto-save-buffer t)
#+end_src

** Window numbering

Changing from one window to another is so easy in Emacs with window number,
you just key in *M-n* to jump to n-th window numbered by the plugin.
#+BEGIN_SRC emacs-lisp
(window-numbering-mode 1)
#+END_SRC

** Ediff and diff

Recover previous windows configuration when quitting ediff.
#+BEGIN_SRC emacs-lisp
(setq vc-diff-switches '("-b" "-B" "-u"))
(setq vc-git-diff-switches nil)
(setq diff-switches "-u")
(eval-after-load "ediff"
  `(add-hook 'ediff-after-quit-hook-internal 'winner-undo))
#+END_SRC

** Don't disable narrowing commands

#+begin_src emacs-lisp
(put 'narrow-to-page 'disable nil)
(put 'narrow-to-defun 'disable nil)
(put 'narrow-to-region 'disable nil)
#+end_src
** Executable scripts

#+begin_src emacs-lisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Cleanup white spaces

#+begin_src emacs-lisp
(require 'whitespace-cleanup-mode)
(defun turn-on-whitespace-cleanup-mode ()
  "Rewrite `turn-on-whitespace-cleanup-mode' of `whitespace-cleanup-mode' so
that `whitespace-cleanup-mode' will not turn on for large files whose size are
larger than `large-file-warning-threshold'."
  (unless (or (minibufferp)
              (apply 'derived-mode-p whitespace-cleanup-mode-ignore-modes)
              (>= (buffer-size) large-file-warning-threshold))
    (whitespace-cleanup-mode 1)))
(global-whitespace-cleanup-mode)
#+end_src

** Tramp

Unfortunately currently Cygwin doesn't support file descriptor passing via
unix-domain sockets and it's not possible to enable ControlMaster (Google
=Cygwin ssh ControlMaster=).
#+begin_src emacs-lisp
(when *cygwin*
  (setq tramp-use-ssh-controlmaster-options nil))
(when (executable-find "rsync")
  (setq tramp-default-method "rsync"))
#+end_src

** Auto Hot Key

To automatically remap *capslock* to *ctrl* and *shift-capslock* to original
*capslock* every time you start up PC:
+ Click the Start button Picture of the Start button , click All Programs,
  right-click the Startup folder, and then click Open.
+ Right-click the [[~/.emacs.d/starter-kit-ahk.ahk][starter-kit-ahk]] script, and then click Create Shortcut. The
  new shortcut appears in the same location as the original item.
+ Drag the shortcut into the Startup folder.

#+begin_src emacs-lisp
(setq ahk-syntax-directory (concat starter-kit-dir "src/ahk-mode/Syntax/"))
(add-to-list 'auto-mode-alist
             '("\\.ahk$"  . ahk-mode))
(autoload 'ahk-mode "ahk-mode" "Mode for editing AutoHotKey configuration file." t)
#+end_src

** Text mode

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-flyspell)
#+end_src

** Csv mode

#+begin_src emacs-lisp
(setq csv-separators '("," ";" "|" " "))
#+end_src

** Executable buffer

#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Pinyin input

#+begin_src emacs-lisp
(defvar starter-kit-eim-py-bank (expand-file-name
                             "eim-user-bank.txt"
                             (if dropbox-root
                                 (expand-file-name "dict" dropbox-root)
                               (expand-file-name "~/.emacs.d/pyim")))
  "Pinyin word bank file. This should be the full path of the bank file.")
(autoload 'eim-use-package "eim" "Another emacs input method" t)
;; 不使用tooltip
(setq eim-use-tooltip nil)
(register-input-method
 "eim-wb" "euc-cn" 'eim-use-package
 "五笔" "汉字五笔输入法" "wb.txt")
(register-input-method
 "eim-py" "euc-cn" 'eim-use-package
 "拼音" "汉字拼音输入法" starter-kit-eim-py-bank)
;; 默认的multilingual text输入法
(setq default-input-method "eim-py")
;; 输入;暂时输入英文
(autoload 'eim-insert-ascii "eim-extra" "Use a key to insert English." t)
(global-set-key ";" 'eim-insert-ascii)
;; install py bank for eim if needed
(unless (file-exists-p (file-name-directory starter-kit-eim-py-bank))
  (mkdir (file-name-directory starter-kit-eim-py-bank) t))
(unless (file-exists-p starter-kit-eim-py-bank)
  (copy-file
   (expand-file-name
    "py.txt"
    (file-name-directory (locate-library "eim")))
   starter-kit-eim-py-bank))
#+end_src

** CMake mode

#+BEGIN_SRC emacs-lisp
(add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
#+END_SRC

** Rst mode (reStructuredText)

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rst\\'" . rst-mode))
  (autoload 'rst-mode "rst")
  (defun my-rst-config ()
    (turn-on-flyspell))
  (add-hook 'rst-mode-hook 'my-rst-config)
#+END_SRC

** Key Chord mode

Use *jk* key chord to quite everything.
#+begin_src emacs-lisp
  (require 'key-chord)
  (eval-after-load 'evil
    `(progn
       (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
       (key-chord-define evil-normal-state-map "jk" 'keyboard-quit)
       (key-chord-define evil-visual-state-map "jk" 'keyboard-quit)))
  (key-chord-define minibuffer-local-map "jk" 'minibuffer-keyboard-quit)
  (key-chord-define minibuffer-local-ns-map "jk" 'minibuffer-keyboard-quit)
  (key-chord-define minibuffer-local-completion-map "jk" 'minibuffer-keyboard-quit)
  (key-chord-define minibuffer-local-must-match-map "jk" 'minibuffer-keyboard-quit)
  (key-chord-define minibuffer-local-isearch-map "jk" 'minibuffer-keyboard-quit)
  (key-chord-mode 1)
#+end_src

** anzu and evil anzu

#+begin_src emacs-lisp
(eval-after-load 'evil
  `(require evil-anzu))
(global-anzu-mode +1)
(global-set-key (kbd "M-%") 'anzu-query-replace-regexp)
#+end_src
