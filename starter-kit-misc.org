#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc

Things that don't fit anywhere else.

** User name and email

#+begin_src emacs-lisp
(setq user-full-name "Qingming He")
(setq user-mail-address "906459647@qq.com")
#+end_src

** Use GNUpg

#+begin_src emacs-lisp
(setq epa-file-cache-passphrase-for-symmetric-encryption nil)
(setq epa-file-inhibit-auto-save t)
(auto-encryption-mode 1)
#+end_src

** Ensure server safe in windows

On Windows and Cygwin, errors of /some/path/ is unsafe often occur. So
redefine server-ensure-safe-dir function to suppress this kind of error.
Besides, you should make =server-socket-dir= directory manually or server
cannot start. After server started, summon Emacs in terminal by:
#+begin_src sh :tangle no
emacsclient -t FILE
#+end_src

#+BEGIN_SRC emacs-lisp
(require 'server)
(when *cygwin*
  (defun server-ensure-safe-dir (dir) "Noop" t)
  (unless (file-exists-p server-socket-dir)
    (mkdir server-socket-dir)))
(unless (server-running-p)
  (server-start))
#+END_SRC

** Winner mode

Winner mode enables you goto previous windows configuration easily.
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

** Save places in opened files

When you visit a file, point goes to the last place where it was when you
previously visited the same file.
#+BEGIN_SRC emacs-lisp
(setq-default save-place t)
(setq save-place-file (concat starter-kit-dir ".saved-places"))
(require 'saveplace)
#+END_SRC

** Transparently open compressed files

#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Save a list of recent files visited

#+begin_src emacs-lisp
(setq recentf-max-saved-items 1000
      recentf-exclude '("/tmp/" "/ssh:"))
(recentf-mode 1)
#+end_src

** Seed the random number

#+begin_src emacs-lisp
(random t)
#+end_src

** Backup files

Rather than saving backup files scattered all over the file system, let them
live in the =/tmp= directory.
#+begin_src emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(setq version-control t
      delete-old-versions t
      backup-by-copying t
      kept-old-versions 2
      kept-new-versions 6)
#+end_src

** Bookmark

#+BEGIN_SRC emacs-lisp
(setq bmkp-bmenu-state-file (expand-file-name ".emacs-bmk-bmenu-state.el" starter-kit-dir))
#+END_SRC

** Always auto revert file

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Enable erase buffer

#+BEGIN_SRC emacs-lisp
(put 'erase-buffer 'disabled nil)
#+END_SRC

** 80 Column Rule; auto fill

It's a good habit to obey to 80 column rule. In the convenience of adding
continuation marker in code such as Fortran, two columns are spared.
#+BEGIN_SRC emacs-lisp
(setq default-fill-column 78)
(defadvice do-auto-fill (around my-indent-after-fill activate)
  (let ((p (point)))
    ad-do-it
    (when (/= p (point))
      (indent-for-tab-command))))
#+END_SRC

** Disable recentering

For smooth scrolling and disabling the auto-recentering of emacs screen when
moving cursor. Set scroll margin to be 4 so that an ape can see the following
lines of codes.
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000
      auto-window-vscroll nil)
(setq scroll-margin 4)
#+END_SRC

** Garbage collection

Emacs GC is time consuming for that Emacs will initiate GC every 0.76 MB. We
set it to be 20 MB to save time.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

** Ediff and diff

Recover previous windows configuration when quitting ediff.
#+BEGIN_SRC emacs-lisp
(setq vc-diff-switches '("-b" "-B" "-u"))
(setq vc-git-diff-switches nil)
(setq diff-switches "-u")
(eval-after-load "ediff"
  `(add-hook 'ediff-after-quit-hook-internal 'winner-undo))
#+END_SRC

** Don't disable narrowing commands

#+begin_src emacs-lisp
(put 'narrow-to-page 'disable nil)
(put 'narrow-to-defun 'disable nil)
(put 'narrow-to-region 'disable nil)
#+end_src

** Executable scripts

#+begin_src emacs-lisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Cleanup white spaces

#+begin_src emacs-lisp
(require 'whitespace-cleanup-mode)
(defun turn-on-whitespace-cleanup-mode ()
  "Rewrite `turn-on-whitespace-cleanup-mode' of `whitespace-cleanup-mode' so
that `whitespace-cleanup-mode' will not turn on for large files whose size are
larger than `large-file-warning-threshold'."
  (unless (or (minibufferp)
              (apply 'derived-mode-p whitespace-cleanup-mode-ignore-modes)
              (>= (buffer-size) large-file-warning-threshold))
    (whitespace-cleanup-mode 1)))
(global-whitespace-cleanup-mode)
#+end_src

** Tramp

Unfortunately currently Cygwin doesn't support file descriptor passing via
unix-domain sockets and it's not possible to enable ControlMaster (Google
=Cygwin ssh ControlMaster=).
#+begin_src emacs-lisp
(when *cygwin*
  (setq tramp-use-ssh-controlmaster-options nil))
(setq tramp-default-method "ssh")
#+end_src

** Pinyin input

#+begin_src emacs-lisp
(defvar starter-kit-eim-py-bank (expand-file-name
                             "eim-user-bank.txt"
                             (if dropbox-root
                                 (expand-file-name "dict" dropbox-root)
                               (expand-file-name "pyim" starter-kit-dir)))
  "Pinyin word bank file. This should be the full path of the bank file.")
(autoload 'eim-use-package "eim" "Another emacs input method" t)
;; 不使用tooltip
(setq eim-use-tooltip nil)
(register-input-method
 "eim-wb" "euc-cn" 'eim-use-package
 "五笔" "汉字五笔输入法" "wb.txt")
(register-input-method
 "eim-py" "euc-cn" 'eim-use-package
 "拼音" "汉字拼音输入法" starter-kit-eim-py-bank)
;; 默认的multilingual text输入法
(setq default-input-method "eim-py")
;; 输入;暂时输入英文
(autoload 'eim-insert-ascii "eim-extra" "Use a key to insert English." t)
(global-set-key ";" 'eim-insert-ascii)
;; install py bank for eim if needed
(unless (file-exists-p (file-name-directory starter-kit-eim-py-bank))
  (mkdir (file-name-directory starter-kit-eim-py-bank) t))
(unless (file-exists-p starter-kit-eim-py-bank)
  (copy-file
   (expand-file-name
    "py.txt"
    (file-name-directory (locate-library "eim")))
   starter-kit-eim-py-bank))
#+end_src

** Aliases

+ Answer *y* rather than *yes*.
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Git and Magit

#+begin_src emacs-lisp
(setq magit-completing-read-function 'magit-ido-completing-read)
#+end_src

** Auto indent after yank

#+begin_src emacs-lisp
(dolist (command '(insert-for-yank))
   (eval `(defadvice ,command (after indent-region activate)
            (and (not current-prefix-arg)
                 (member major-mode '(emacs-lisp-mode lisp-mode clojure-mode
                                                      lisp-interaction-mode
                                                      scheme-mode haskell-mode
                                                      ruby-mode rspec-mode
                                                      c-mode c++-mode
                                                      objc-mode latex-mode
                                                      plain-tex-mode f90-mode
                                                      fortran-mode))
                 (let ((mark-even-if-inactive transient-mark-mode))
                   (indent-region (region-beginning) (region-end) nil))))))
#+end_src

** Enable disabled commands

#+begin_src emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
;; may be dangerous
;; (setq disabled-command-function nil)
#+end_src

** Auto indent after yank

#+begin_src emacs-lisp
(dolist (command '(yank yank-pop evil-paste-after evil-paste-before insert-for-yank))
   (eval `(defadvice ,command (after indent-region activate)
            (and (not current-prefix-arg)
                 (member major-mode '(emacs-lisp-mode lisp-mode clojure-mode
                                                      scheme-mode haskell-mode
                                                      ruby-mode rspec-mode
                                                      python-mode c-mode
                                                      c++-mode objc-mode
                                                      latex-mode
                                                      plain-tex-mode f90-mode
                                                      fortran-mode))
                 (let ((mark-even-if-inactive transient-mark-mode))
                   (indent-region (region-beginning) (region-end) nil))))))
#+end_src
