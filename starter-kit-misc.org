#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Misc

Things that don't fit anywhere else.

** User name and email

#+begin_src emacs-lisp
(setq user-full-name "Qingming He")
(setq user-mail-address "906459647@qq.com")
#+end_src

** Use GNUpg

#+begin_src emacs-lisp
(setq epa-file-cache-passphrase-for-symmetric-encryption nil)
(setq epa-file-inhibit-auto-save t)
(setq my-epa-loaded nil)
(defun lazy-load-auto-encryption-mode ()
  (unless my-epa-loaded
    (let* ((fname (buffer-file-name))
           (ext (when fname (file-name-extension fname))))
      (when (and ext (string= ext "gpg"))
        (auto-encryption-mode 1)
        (setq my-epa-loaded t)
        (remove-hook 'find-file-hook 'lazy-load-auto-encryption-mode)))))
(add-hook 'find-file-hook 'lazy-load-auto-encryption-mode)
#+end_src

** Save places in opened files

When you visit a file, point goes to the last place where it was when you
previously visited the same file.
#+BEGIN_SRC emacs-lisp
(setq-default save-place t)
(setq save-place-file (concat starter-kit-dir ".saved-places"))
(setq saveplace-loaded nil)
(defun lazy-load-saveplace ()
  (unless saveplace-loaded
    (if (< emacs-major-version 25)
        (require 'saveplace)
      (save-place-mode 1))
    (save-place-find-file-hook)
    (setq saveplace-loaded t)
    (remove-hook 'find-file-hook 'lazy-load-saveplace)))
(add-hook 'find-file-hook 'lazy-load-saveplace)
#+END_SRC

** Transparently open compressed files

#+begin_src emacs-lisp
(setq my-autocompression-loaded nil)
(defun my-compressed-file-p ()
  (let* ((fname (buffer-file-name))
         (ext (when fname (file-name-extension fname))))
    (and
     ext
     (string-match
      "\\(Z\\|bz2\\|tbz2?\\|tgz\\|svgz\\|sifz\\|g?z\\|lz\\|lzma\\|xz\\|txz\\|dz\\|\\)\\'"
      ext))))
(defun lazy-load-auto-compression-mode ()
  (when (and
         (not my-autocompression-loaded)
         (my-compressed-file-p))
    (auto-compression-mode 1)
    (setq my-autocompression-loaded t)
    (remove-hook 'find-file-hook 'lazy-load-auto-compression-mode)))
(add-hook 'find-file-hook 'lazy-load-auto-compression-mode)
#+end_src

** Save a list of recent files visited

#+begin_src emacs-lisp
(defun my-clean-and-save-recentf ()
  (interactive)
  (when (and recentf-mode
             (not (file-locked-p recentf-save-file)))
    (recentf-cleanup)
    (recentf-save-list)))
(defun lazy-load-recentf ()
  (unless recentf-mode
    (recentf-mode)
    (recentf-track-opened-file)
    (remove-hook 'find-file-hook 'lazy-load-recentf)))
(setq recentf-max-saved-items 2000
      recentf-exclude '("/tmp/" "/ssh:" "\\.git/" "/scp:")
      recentf-auto-cleanup 'never)
(add-hook 'find-file-hook 'lazy-load-recentf)
(setq recentf-clean-and-save-timer
      (run-with-idle-timer 600 t 'my-clean-and-save-recentf))
#+end_src

** Seed the random number

#+begin_src emacs-lisp
(random t)
#+end_src

** Bookmark

#+BEGIN_SRC emacs-lisp
(setq bmkp-bmenu-state-file (expand-file-name ".emacs-bmk-bmenu-state.el" starter-kit-dir))
#+END_SRC

** Always auto revert file

#+BEGIN_SRC emacs-lisp
(defun lazy-load-auto-revert-mode ()
  (unless global-auto-revert-mode
    (global-auto-revert-mode 1)
    (remove-hook 'find-file-hook 'lazy-load-auto-revert-mode)))
(add-hook 'find-file-hook 'lazy-load-auto-revert-mode)
#+END_SRC

** 80 Column Rule; auto fill

It's a good habit to obey to 80 column rule.
#+BEGIN_SRC emacs-lisp
(setq default-fill-column 80)
(setq-default require-final-newline t)
(defadvice do-auto-fill (around my-indent-after-fill activate)
  (let ((p (point)))
    ad-do-it
    (when (/= p (point))
      (indent-for-tab-command))))
#+END_SRC

** Garbage collection

Emacs GC is time consuming for that Emacs will initiate GC every 0.76 MB. We
set it to be 20 MB to save time.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

** Ediff and diff

Split window horizontally rather than vertically in Ediff.
#+BEGIN_SRC emacs-lisp
(setq vc-diff-switches '("-b" "-B" "-u"))
(setq vc-git-diff-switches nil)
(setq diff-switches "-u")
(setq-default ediff-window-setup-function 'ediff-setup-windows-plain
              ediff-split-window-function 'split-window-horizontally
              ediff-merge-split-window-function 'split-window-horizontally)
#+END_SRC

** Executable scripts

#+begin_src emacs-lisp
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Cleanup white spaces

#+begin_src emacs-lisp
(with-eval-after-load 'whitespace-cleanup-mode
  (defun turn-on-whitespace-cleanup-mode ()
    "Rewrite `turn-on-whitespace-cleanup-mode' of `whitespace-cleanup-mode' so
that `whitespace-cleanup-mode' will not turn on for large files whose size are
larger than `large-file-warning-threshold'."
    (unless (or (minibufferp)
                (apply 'derived-mode-p whitespace-cleanup-mode-ignore-modes)
                (>= (buffer-size) large-file-warning-threshold))
      (whitespace-cleanup-mode 1))))
(defun lazy-load-whitespace-cleanup-mode ()
  (unless global-whitespace-cleanup-mode
    (global-whitespace-cleanup-mode 1)
    (remove-hook 'find-file-hook 'lazy-load-whitespace-cleanup-mode)))
(add-hook 'find-file-hook 'lazy-load-whitespace-cleanup-mode)
#+end_src

** Pinyin input

#+begin_src emacs-lisp
(defvar starter-kit-eim-py-bank (expand-file-name
                             "eim-user-bank.txt"
                             (if dropbox-root
                                 (expand-file-name "dict" dropbox-root)
                               (expand-file-name "pyim" starter-kit-dir)))
  "Pinyin word bank file. This should be the full path of the bank file.")
;; 不使用tooltip
(setq eim-use-tooltip nil)
(register-input-method
 "eim-wb" "euc-cn" 'eim-use-package
 "五笔" "汉字五笔输入法" "wb.txt")
(register-input-method
 "eim-py" "euc-cn" 'eim-use-package
 "拼音" "汉字拼音输入法" starter-kit-eim-py-bank)
;; 默认的multilingual text输入法
(setq default-input-method "eim-py")
;; 输入;暂时输入英文
(global-set-key ";" 'eim-insert-ascii)
;; install py bank for eim if needed
(unless (file-exists-p (file-name-directory starter-kit-eim-py-bank))
  (mkdir (file-name-directory starter-kit-eim-py-bank) t))
(unless (file-exists-p starter-kit-eim-py-bank)
  (copy-file
   (expand-file-name
    "py.txt"
    (file-name-directory (locate-library "eim")))
   starter-kit-eim-py-bank))
#+end_src

** Aliases

+ Answer *y* rather than *yes*.
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Auto indent after yank

#+begin_src emacs-lisp
(defvar auto-indent-after-yank t
  "Whether auto indent after yanking.")

(dolist (command '(insert-for-yank))
   (eval `(defadvice ,command (after indent-region activate)
            (and (not current-prefix-arg)
                 (member major-mode '(emacs-lisp-mode lisp-mode clojure-mode
                                                      lisp-interaction-mode
                                                      scheme-mode haskell-mode
                                                      ruby-mode rspec-mode
                                                      c-mode c++-mode
                                                      objc-mode latex-mode
                                                      plain-tex-mode f90-mode
                                                      fortran-mode cmake-mode))
                 (let ((mark-even-if-inactive transient-mark-mode))
                   (when auto-indent-after-yank
                     (indent-region (region-beginning) (region-end) nil)))))))

(defun toggle-auto-indent-after-yank ()
  (interactive)
  (setq auto-indent-after-yank (not auto-indent-after-yank))
  (if auto-indent-after-yank
      (message "Auto indent after yank enabled!")
    (message "Auto indent after yank disabled!")))
#+end_src

** Enable disabled commands

#+begin_src emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'narrow-to-page 'disable nil)
(put 'narrow-to-defun 'disable nil)
(put 'narrow-to-region 'disable nil)
(put 'erase-buffer 'disabled nil)
;; may be dangerous
;; (setq disabled-command-function nil)
#+end_src

** Load PATH from shell

#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src

** Minibuffer

#+begin_src emacs-lisp
(defun minibuffer-inactive-mode-hook-setup ()
  (set-syntax-table (let* ((table (make-syntax-table)))
                      (modify-syntax-entry ?/ "." table)
                      table)))

(add-hook 'minibuffer-inactive-mode-hook
          'minibuffer-inactive-mode-hook-setup)
#+end_src
