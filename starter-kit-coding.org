#+TITLE: Starter Kit Coding
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Coding

** Prog mode hooks
A single hook holding those functions which should be run in *every*
code buffer.

We have a number of turn-on-* functions since it's advised that lambda
functions not go in hooks. Repeatedly evaling an add-to-list with a
hook value will repeatedly add it since there's no way to ensure that
a lambda doesn't already exist in the list.

#+name: starter-kit-hook-functions
#+begin_src emacs-lisp
(defvar starter-kit-coding-hook nil
  "Hook that gets run on activation of any programming mode.")

(defun starter-kit-auto-fill ()
  (setq-local comment-auto-fill-only-comments nil)
  (auto-fill-mode t))
(add-hook 'starter-kit-coding-hook 'starter-kit-auto-fill)

(defun starter-kit-turn-on-flyspell ()
  (flyspell-prog-mode))
(add-hook 'starter-kit-coding-hook 'starter-kit-turn-on-flyspell)

(defun starter-kit-turn-on-hs ()
  (hs-minor-mode)
  (hideshowvis-enable)
  (hideshowvis-symbols))
(add-hook 'starter-kit-coding-hook 'starter-kit-turn-on-hs)

;; Use relative line number. Set linum-relative-current-symbol to be empty
;; string so that linum-relative will show the real line number at current
;; line. Linum mode is too slow.
(defun starter-kit-turn-on-linum ()
  (interactive)
  (make-local-variable 'linum-relative-current-symbol)
  (setq linum-relative-current-symbol "")
  (linum-mode 1))

(setq fic-highlighted-words '("FIXME" "TODO" "BUG" "KLUDGE" "DEBUG"))
(require 'fic-mode)
(add-hook 'starter-kit-coding-hook 'turn-on-fic-mode)

(defun run-starter-kit-coding-hook ()
  "Enable things that are convenient across all coding buffers."
  (run-hooks 'starter-kit-coding-hook))

(add-hook 'prog-mode-hook 'run-starter-kit-coding-hook)
#+end_src

** Handle parens

#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp
(show-paren-mode 1)
(smartparens-global-mode t)
(smartparens-global-strict-mode t)
#+end_src

*** CC

Use smartparens to handle curly braces and block comment.
#+begin_src emacs-lisp
(defun sp-cc-block-comment (&rest __ignored)
  (save-excursion
    (forward-line -1)
    (end-of-line)
    (insert "*"))
  (save-excursion
    (insert "\n")
    (indent-according-to-mode))
  (indent-according-to-mode))

(defun sp-cc-var-comment (&rest __ignored)
  (backward-char 1)
  (insert "*< "))

(sp-with-modes '(c-mode c++-mode)
  (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
  (sp-local-pair "/*" "*/" :post-handlers '((sp-cc-var-comment "SPC")
                                            (sp-cc-block-comment "RET"))))
#+end_src
