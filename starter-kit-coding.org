#+TITLE: Starter Kit Coding
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Coding

Some features shared by all programming languages and several languages with
light configurations.
** Prog mode hooks
A single hook holding those functions which should be run in *every*
code buffer.

We have a number of turn-on-* functions since it's advised that lambda
functions not go in hooks. Repeatedly evaling an add-to-list with a
hook value will repeatedly add it since there's no way to ensure that
a lambda doesn't already exist in the list.

#+name: starter-kit-hook-functions
#+begin_src emacs-lisp
(defvar starter-kit-coding-hook nil
  "Hook that gets run on activation of any programming mode.")

(defun starter-kit-auto-fill ()
  (setq-local comment-auto-fill-only-comments nil)
  (auto-fill-mode t))
(add-hook 'starter-kit-coding-hook 'starter-kit-auto-fill)

(defun starter-kit-turn-on-flyspell ()
  (flyspell-prog-mode))
(add-hook 'starter-kit-coding-hook 'starter-kit-turn-on-flyspell)

(defun starter-kit-turn-on-hs ()
  (hs-minor-mode)
  (when (window-system)
    (hideshowvis-enable)
    (hideshowvis-symbols)))
(add-hook 'starter-kit-coding-hook 'starter-kit-turn-on-hs)

(defun starter-kit-turn-on-linum ()
  (interactive)
  (linum-mode 1))
(add-hook 'starter-kit-coding-hook 'starter-kit-turn-on-linum)

(setq fic-highlighted-words '("FIXME" "TODO" "BUG" "KLUDGE" "DEBUG"))
(add-hook 'starter-kit-coding-hook 'turn-on-fic-mode)

(defun run-starter-kit-coding-hook ()
  "Enable things that are convenient across all coding buffers."
  (run-hooks 'starter-kit-coding-hook))

(add-hook 'prog-mode-hook 'run-starter-kit-coding-hook)
#+end_src

** Handle parens

[[help:show-paren-mode][show-paren-mode]] and [[help:electric-pair-mode][electric-pair-mode]] are lighter than smartparens and
minimally intrusive.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp
(show-paren-mode 1)
(electric-pair-mode 1)
(setq electric-pair-open-newline-between-pairs t)
(setq electric-pair-pairs
      '((?\" . ?\")
        (?{ . ?})))
#+end_src

** Show function name in the header line                                        :which:function:mode:

#+begin_src emacs-lisp
(setq which-func-modes
      '(python-mode c-mode c++-mode f90-mode fortran-mode emacs-lisp-mode
                    org-mode perl-mode ruby-mode scheme-mode
                    rst-mode markdown-mode))
(defun starter-kit-which-func-format ()
  (setq-local which-func-unknown "n/a")
  (setq-local header-line-format
              '((which-func-mode ("" which-func-format " "))))
  (setq-local mode-line-misc-info
              (assq-delete-all 'which-func-mode mode-line-misc-info)))
(defun starter-kit-turn-off-which-func ()
  (setq-local header-line-format nil)
  (setq-local mode-line-misc-info
              (assq-delete-all 'which-func-mode mode-line-misc-info)))
(mapc
 (lambda (mode)
   (add-hook (intern (format "%s-hook" (symbol-name mode)))
             'starter-kit-which-func-format))
 which-func-modes)
(add-hook 'lisp-interaction-mode-hook 'starter-kit-turn-off-which-func t)
(which-function-mode 1)
#+end_src

** CMake mode

#+BEGIN_SRC emacs-lisp
(add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
(add-hook 'cmake-mode-hook 'starter-kit-turn-on-linum)
#+END_SRC

** Auto Hot Key

To automatically remap *capslock* to *ctrl* and *shift-capslock* to original
*capslock* every time you start up PC:
+ Click the Start button Picture of the Start button , click All Programs,
  right-click the Startup folder, and then click Open.
+ Right-click the [[~/.emacs.d/starter-kit-ahk.ahk][starter-kit-ahk]] script, and then click Create Shortcut. The
  new shortcut appears in the same location as the original item.
+ Drag the shortcut into the Startup folder.

#+begin_src emacs-lisp
(setq ahk-syntax-directory (concat starter-kit-dir "src/ahk-mode/Syntax/"))
(add-to-list 'auto-mode-alist
             '("\\.ahk$"  . ahk-mode))
(autoload 'ahk-mode "ahk-mode" "Mode for editing AutoHotKey configuration file." t)
#+end_src

** Rnc
*** What is rnc

#+BEGIN_QUOTE
RELAX NG is a simple schema language for XML, based on [RELAX] and [TREX]. A
RELAX NG schema specifies a pattern for the structure and content of an XML
document. A RELAX NG schema thus identifies a class of XML documents
consisting of those documents that match the pattern.

Two syntaxes have been defined for RELAX NG. The original syntax uses XML;
with this syntax an RELAX NG schema is itself an XML document. Subsequently, a
compact non-XML syntax has been defined.
#+END_QUOTE

The compact format file has a "rnc" suffix and rnc-mode provide a major mode
for these files.

*** Basic Setup

#+BEGIN_SRC emacs-lisp
(autoload 'rnc-mode "rnc-mode" "Rnc mode" t)
(add-to-list 'auto-mode-alist '("\\.rnc\\'" . rnc-mode))
#+END_SRC

*** rnc along with imemu

#+BEGIN_SRC emacs-lisp
(setq rnc-enable-imenu t)
#+END_SRC
