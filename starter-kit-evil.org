#+TITLE: Emacs Starter Evil
#+OPTIONS: toc:2 num:nil ^:nil

* Starter Kit Evil

Evil is an evil mode to imitate Vim in Emacs. Starter Kit will set global evil
mode if starter-kit-evil is activated.

** Evil leader

#+BEGIN_QUOTE
Evil Leader provides the /leader/ feature from Vim that provides an easy way
to bind keys under a variable prefix key. For an experienced Emacs User it is
nothing more than a convoluted key map, but for a Evil user coming from Vim it
means an easier start. The default escape is *\*.
#+END_QUOTE
 
You should enable global-evil-leader-mode before you enable evil-mode,
otherwise evil-leader won't be enabled in initial buffers (*scratch*,
*Messages*, ...)
#+BEGIN_SRC emacs-lisp
(require 'evil-leader)
(global-evil-leader-mode)
#+END_SRC

** Evil mode

Set evil mode globally for that the author is a severe Vim user for the past
several years.
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
#+END_SRC

** Go to change

It is so happy to key in *g;* or *C-o* to go to last change and *g* or *C-i*,
to com back.

** Surround
This package emulates surround.vim by Tim Pope. The functionality is wrapped
into a minor mode.

#+BEGIN_SRC emacs-lisp
(require 'surround)
(global-surround-mode 1)
#+END_SRC

To activate it, *M-x surround-mode*.

*** Add surrounding

You can surround in visual-state with s<textobject><trigger> or in
normal-state with ys<textobject><trigger>.

*** Change surrounding

You can change a surrounding with cs<old-trigger><new-trigger>.

*** Delete surrounding

You can delete a surrounding with ds<trigger>.

** Ace jump

Just press =SPC-w=, the first character of word where you want to go and select
the pop up character, you can move in Emacs quickly. Press *C-x SPE* to jump
back.
#+BEGIN_SRC emacs-lisp 
(setq ace-jump-mode-scope 'frame)
(ace-jump-mode-enable-mark-sync)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
#+END_SRC

** Set Vim Bindings
*** Fold and unfold
+ evil has *zo* and *zc* command only support hs-minor-mode and hide-ifdef-mode
+ evil has no *zO* or *zC*
+ Define *<leader>-z?* to support both hs-minor-mode and outline-minor-mode
*** Key bindings with leader
#+BEGIN_SRC emacs-lisp
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
  "zo" (lambda ()
         (interactive)
         (cond (outline-minor-mode (show-entry))
               (hs-minor-mode (hs-show-block))))
  "zO" (lambda ()
         (interactive)
         (cond (outline-minor-mode (show-all))
               (hs-minor-mode (hs-show-all))))
  "zc" (lambda ()
         (interactive)
         (cond (outline-minor-mode (hide-entry))
               (hs-minor-mode (hs-hide-block))))
  "zC" (lambda ()
         (interactive)
         (cond (outline-minor-mode (hide-body))
               (hs-minor-mode (hs-hide-all))))
  "mn" 'multi-eshell-switch
  "me" 'multi-eshell
  "ta" (lambda ()
         (interactive)
         (if prj/use-gtags
             (helm-gtags-select)
           (etags-select-find)))
  "at" (lambda ()
         (interactive)
         (if prj/use-gtags
             (helm-gtags-pop-stack)
           (pop-tag-mark)))
  "mt" 'prj/generate-tags
  "vt" (lambda ()
         (interactive)
         (unless prj/use-gtags
           (etu/visit-tags-table)))
  "tl" 'helm-semantic-or-imenu
  "ne" 'flycheck-next-error
  "sd" 'sdcv-search-input
  "w" 'ace-jump-word-mode
  "l" 'ace-jump-line-mode)
#+END_SRC
   
*** Insert state map
#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-a") 'move-beginning-of-line)
(define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
(define-key evil-insert-state-map (kbd "C-y") 'yank)
#+end_src
*** Ex completion map
#+begin_src emacs-lisp
(define-key evil-ex-completion-map (kbd "M-p") 'previous-complete-history-element)
(define-key evil-ex-completion-map (kbd "M-n") 'next-complete-history-element)
#+end_src


** Disable evil for some modes
#+BEGIN_SRC emacs-lisp
(dolist (mode '(taglist-mode
                w3m-mode
                eww-mode
                dired-mode
                ibuffer-mode
                help-mode))
  (add-to-list 'evil-emacs-state-modes mode))
#+END_SRC

