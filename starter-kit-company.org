#+TITLE: Starter Kit Company
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit Company
** Basic setup

Activate company for coding:
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'company-mode)
(add-hook 'cmake-mode-hook 'company-mode)
(setq company-idle-delay 0.2
      company-require-match nil
      company-auto-complete nil
      company-show-numbers t
      company-dabbrev-downcase nil
      company-clang-insert-arguments nil
      company-begin-commands '(self-insert-command))
#+end_src

** Key bindings

#+begin_src emacs-lisp
(with-eval-after-load 'company
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+end_src

** Company backends

Set the default backends for all modes.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'company
  (setq company-backends
        '(company-capf
          (company-dabbrev-code company-keywords)
          company-dabbrev))
  (make-variable-buffer-local 'company-backends))
#+END_SRC

** Emacs lisp

#+begin_src emacs-lisp
(defun elisp-company-setup ()
  (add-to-list 'company-backends
               '(company-capf company-dabbrev-code)))

(add-hook 'emacs-lisp-mode-hook 'elisp-company-setup)
#+end_src

** Python mode

Use anaconda as backend.
#+begin_src emacs-lisp
(defun python-company-setup ()
  (when jedi-is-installed
    (anaconda-mode)
    (add-to-list 'company-backends
                 '(company-anaconda
                   ;; Do you really need this "words in same mode buffers"
                   ;; backend? Anaconda already has supports for "words in
                   ;; buffer" and "keywords" or likewise and is smarter than
                   ;; the `company-dabbrev-code' backend. To complete words in
                   ;; other buffers, use `hippie-expand' instead.
                   ;; company-dabbrev-code
                   ))))

(add-hook 'python-mode-hook 'python-company-setup)

(with-eval-after-load 'python
  (if (eq 0
          (call-process-shell-command
           "python -c \"import jedi\""))
      (setq jedi-is-installed t)
    (setq jedi-is-installed nil)))
#+end_src

** C

#+begin_src emacs-lisp
(defun c-company-setup ()
  (when clang-installed
    (add-to-list 'company-backends
                 '(company-clang
                   company-dabbrev-code
                   company-keywords))))

(add-hook 'c-mode-hook 'c-company-setup)
(add-hook 'c++-mode-hook 'c-company-setup)

(with-eval-after-load 'cc-mode
  (if (executable-find "clang")
      (setq clang-installed t)
    (setq clang-installed nil)))
#+end_src

** CMake

#+begin_src emacs-lisp
(defun cmake-company-setup ()
  (when cmake-installed
    (add-to-list 'company-backends
                 '(company-cmake
                   company-dabbrev))))

(add-hook 'cmake-mode-hook 'cmake-company-setup)

(with-eval-after-load 'cmake-mode
  (if (executable-find "cmake")
      (setq cmake-installed t)
    (setq cmake-installed nil)))
#+end_src
