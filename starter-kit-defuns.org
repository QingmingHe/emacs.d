#+TITLE: Starter Kit Defuns
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Defuns
** Use ido to find recentf

#+srcname: starter-kit-recentf-ido-find-file
#+begin_src emacs-lisp 
  (defun recentf-ido-find-file () 
    "Find a recent file using Ido." 
    (interactive) 
    (let* ((file-assoc-list 
            (mapcar (lambda (x) 
                      (cons (file-name-nondirectory x) 
                            x)) 
                    recentf-list)) 
           (filename-list 
            (remove-duplicates (mapcar #'car file-assoc-list) 
                               :test #'string=)) 
           (filename (ido-completing-read "Choose recent file: " 
                                          filename-list 
                                          nil 
                                          t))) 
      (when filename 
        (find-file (cdr (assoc filename 
                               file-assoc-list)))))) 
 #+end_src 

** MS word to other format
#+BEGIN_SRC emacs-lisp
(defun my-no-word (fname)
  "Open MS word using antiword."
  (interactive (list (read-file-name "Open MS word file: ")))
  (let (
        (tmp-file-name (format (concat "/tmp/" "." (file-name-nondirectory fname))))
        )
    (progn
      (shell-command
       (format "antiword -m UTF-8 %s > %s" fname tmp-file-name))
      (find-file tmp-file-name))))
#+END_SRC

** Fill line
#+BEGIN_SRC emacs-lisp
(defun my-fill-line (&optional filling)
  "Fill current line with filling from (point) to default-fill-column"
  (interactive (list (read-char "Enter filling character: ")))
  (let ((l-filling " "))
    (when filling
      (setq l-filling filling))
    (let (
          (line-position nil)
          (i 0)
          (remainder nil)
          )
      (setq line-position (- (point) (line-beginning-position)))
      (setq remainder (- default-fill-column line-position))
      (while (< i remainder)
        (setq i (+ 1 i))
        (insert l-filling)))))
#+END_SRC

** ad-advised-definition-p
No such function in Emacs 24.4, so add it.
#+BEGIN_SRC emacs-lisp
(when (not (fboundp 'ad-advised-definition-p))
  (defmacro ad-macro-p (definition)
    ;;"non-nil if DEFINITION is a macro."
    (` (eq (car-safe (, definition)) 'macro)))
  
  (defun ad-advised-definition-p (definition)
    ;;"non-nil if DEFINITION was generated from advice information."
    (if (or (ad-lambda-p definition)
            (ad-macro-p definition)
            (ad-compiled-p definition))
        (let ((docstring (ad-docstring definition)))
          (and (stringp docstring)
               (string-match
                ad-advised-definition-docstring-regexp docstring))))))
#+END_SRC

** Cygwin path to Windows path
Map Cygwin path to Windows path. For example: map =/usr/bin/python= to
=D:/cygwin/usr/bin/python=.
#+BEGIN_SRC emacs-lisp
(defun cygwin-to-win-path (path &optional cygwin-root)
  "Transform Cygwin path to Windows path.

path: Cygwin path.
cygwin-root: root of Cygwin installed on Windows. D:/cygwin for example.
return: Windows path.
"
  (interactive)
  (let ((cygwin-root (or
                      cygwin-root
                      (getenv "CYGWIN_ROOT")
                      (read-string "Root of Cygwin in Windows system: "))))
    (format "%s%s" cygwin-root (expand-file-name path))))
#+END_SRC

** Resize window interactively
#+BEGIN_SRC emacs-lisp
(defun resize-window (&optional arg)    ; Hirose Yuuji and Bob Wiener
  "*Resize window interactively."
  (interactive "p")
  (if (one-window-p) (error "Cannot resize sole window"))
  (or arg (setq arg 1))
  (let (c)
    (catch 'done
      (while t
	(message
	 "h=heighten, s=shrink, w=widen, n=narrow (by %d);  1-9=unit, q=quit"
	 arg)
	(setq c (read-char))
	(condition-case ()
	    (cond
	     ((= c ?h) (enlarge-window arg))
	     ((= c ?s) (shrink-window arg))
	     ((= c ?w) (enlarge-window-horizontally arg))
	     ((= c ?n) (shrink-window-horizontally arg))
	     ((= c ?\^G) (keyboard-quit))
	     ((= c ?q) (throw 'done t))
	     ((and (> c ?0) (<= c ?9)) (setq arg (- c ?0)))
	     (t (beep)))
	  (error (beep)))))
    (message "Done.")))
#+END_SRC
** Indirect region
#+begin_src emacs-lisp
(defun indirect-region (start end &optional mode)
  "Edit the current region in another buffer with `mode'."
  (interactive "r")
  (let ((indirect-buffer-name
         (generate-new-buffer-name
          (format "*Indirect %s*" (buffer-name))))
        (mode (or
               mode
               (intern
                (ido-completing-read
                 "Mode: "
                 (mapcar (lambda (e) 
                           (list (symbol-name e)))
                         (apropos-internal "-mode$" 'commandp))
                 nil t)))))
    (pop-to-buffer
     (make-indirect-buffer (current-buffer) indirect-buffer-name))
    (funcall mode)
    (narrow-to-region start end)
    (setq-local
     header-line-format
     '(:eval (format "Edit. Finish by killing the buffer.")))))
#+end_src

** C include paths
#+begin_src emacs-lisp
(defun get-c-include-paths-general ()
  (let (p1 p2 c-include-paths)
    (with-temp-buffer
      (insert (shell-command-to-string "echo \"\" | g++ -v -x c++ -E -"))
      (goto-char (point-min))
      (search-forward "#include <...>")
      (next-line)
      (setq p1 (line-beginning-position))
      (search-forward "# 1")
      (previous-line)
      (previous-line)
      (setq p2 (line-end-position))
      (setq c-include-paths (split-string (buffer-substring-no-properties p1 p2)))
      (add-to-list 'c-include-paths "."))
    c-include-paths))

(defun get-c-include-paths-pkgs (pkgs)
  "Get c include flags for `pkgs'. `pkgs' should be string or list of string.

Valid form of `pkgs':
\"glib\", \"glib python-2.7\", '(\"glib\" \"python-2.7\")

Returns:
Include paths of `pkgs'"
  (when (and pkgs (executable-find "pkg-config"))
    (let ((c-include-paths nil)
          (pkgs (cond ((listp pkgs) pkgs)
                      ((stringp pkgs) (split-string pkgs)))))
      (mapc
       (lambda (pkg)
         (mapc
          (lambda (inc)
            (when (and
                   (> (length inc) 2)
                   (string= "-I" (substring inc 0 2)))
              (add-to-list 'c-include-paths (substring inc 2))))
          (split-string (shell-command-to-string
                         (format "pkg-config --cflags-only-I %s" pkg)))))
       pkgs)
      c-include-paths)))
#+end_src

