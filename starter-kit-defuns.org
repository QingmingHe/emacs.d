#+TITLE: Starter Kit Defuns
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Defuns
** Use ido to find recentf

#+srcname: starter-kit-recentf-ido-find-file
#+begin_src emacs-lisp
  (defun recentf-ido-find-file ()
    "Find a recent file using Ido."
    (interactive)
    (let* ((file-assoc-list
            (mapcar (lambda (x)
                      (cons (file-name-nondirectory x)
                            x))
                    recentf-list))
           (filename-list
            (remove-duplicates (mapcar #'car file-assoc-list)
                               :test #'string=))
           (filename (ido-completing-read "Choose recent file: "
                                          filename-list
                                          nil
                                          t)))
      (when filename
        (find-file (cdr (assoc filename
                               file-assoc-list))))))
 #+end_src

** MS word to other format                                                      :no:word:
#+BEGIN_SRC emacs-lisp
(defun my-no-word (fname)
  "Open MS word using antiword."
  (interactive (list (read-file-name "Open MS word file: ")))
  (let ((tmp-file-name (format (concat "/tmp/" "." (file-name-nondirectory fname)))))
    (progn
      (shell-command
       (format "antiword -m UTF-8 %s > %s" fname tmp-file-name))
      (find-file tmp-file-name))))
#+END_SRC

** Fill line
#+BEGIN_SRC emacs-lisp
(defun my-fill-line (&optional filling)
  "Fill current line with filling from (point) to default-fill-column"
  (interactive (list (read-char "Enter filling character: ")))
  (let ((l-filling " "))
    (when filling
      (setq l-filling filling))
    (let ((line-position nil)
          (i 0)
          (remainder nil))
      (setq line-position (- (point) (line-beginning-position)))
      (setq remainder (- default-fill-column line-position))
      (while (< i remainder)
        (setq i (+ 1 i))
        (insert l-filling)))))
#+END_SRC

** ad-advised-definition-p
No such function in Emacs 24.4, so add it.
#+BEGIN_SRC emacs-lisp
(when (not (fboundp 'ad-advised-definition-p))
  (defmacro ad-macro-p (definition)
    ;;"non-nil if DEFINITION is a macro."
    (` (eq (car-safe (, definition)) 'macro)))

  (defun ad-advised-definition-p (definition)
    ;;"non-nil if DEFINITION was generated from advice information."
    (if (or (ad-lambda-p definition)
            (ad-macro-p definition)
            (ad-compiled-p definition))
        (let ((docstring (ad-docstring definition)))
          (and (stringp docstring)
               (string-match
                ad-advised-definition-docstring-regexp docstring))))))
#+END_SRC

** Resize window interactively
#+BEGIN_SRC emacs-lisp
(defun resize-window (&optional arg)    ; Hirose Yuuji and Bob Wiener
  "*Resize window interactively."
  (interactive "p")
  (if (one-window-p) (error "Cannot resize sole window"))
  (or arg (setq arg 1))
  (let (c)
    (catch 'done
      (while t
	(message
	 "h=heighten, s=shrink, w=widen, n=narrow (by %d);  1-9=unit, q=quit"
	 arg)
	(setq c (read-char))
	(condition-case ()
	    (cond
	     ((= c ?h) (enlarge-window arg))
	     ((= c ?s) (shrink-window arg))
	     ((= c ?w) (enlarge-window-horizontally arg))
	     ((= c ?n) (shrink-window-horizontally arg))
	     ((= c ?\^G) (keyboard-quit))
	     ((= c ?q) (throw 'done t))
	     ((and (> c ?0) (<= c ?9)) (setq arg (- c ?0)))
	     (t (beep)))
	  (error (beep)))))
    (message "Done.")))
#+END_SRC

** Indirect region
#+begin_src emacs-lisp
(defun indirect-region (start end &optional mode)
  "Edit the current region in another buffer with `mode'."
  (interactive "r")
  (let ((indirect-buffer-name
         (generate-new-buffer-name
          (format "*Indirect %s*" (buffer-name))))
        (mode (or
               mode
               (intern
                (ido-completing-read
                 "Mode: "
                 (mapcar (lambda (e)
                           (list (symbol-name e)))
                         (apropos-internal "-mode$" 'commandp))
                 nil t)))))
    (pop-to-buffer
     (make-indirect-buffer (current-buffer) indirect-buffer-name))
    (funcall mode)
    (narrow-to-region start end)
    (setq-local
     header-line-format
     '(:eval (format "Edit. Finish by killing the buffer.")))))
#+end_src

** Thing at point
#+begin_src emacs-lisp
(defun thing-at-point-no-properties (thing)
  "Get thing at point without properties."
  (let* ((bnd (bounds-of-thing-at-point thing))
         (p0 (car bnd))
         (p1 (cdr bnd)))
    (when (and p0 p1)
      (buffer-substring-no-properties p0 p1))))
#+end_src

** For macro

#+begin_src emacs-lisp
(defmacro --for (item in alist &rest body)
  `(mapc
    (lambda (item)
      (let ((,item item))
       ,@body))
    ,alist))
#+end_src

Simple usage:
#+begin_src emacs-lisp :tangle no
(--for i in '(1 2 3)
       (print i))
#+end_src
** Cursor in string or comment

#+begin_src emacs-lisp
(defun cursor-inside-string? ()
  (interactive)
  (nth 3 (syntax-ppss)))

(defun cursor-inside-comment? ()
  (interactive)
  (nth 4 (syntax-ppss)))
#+end_src

** re-evaluate region or buffer

=eval-buffer=, =eval-region=, =eval-last-sexp= and =eval-print-last-sexp=
don't re-evaluate =defvar= and =defcustom=. To re-evaluate, replace =defvar=
or =defcustom= with =setq= or use =eval-defun=.

#+begin_src emacs-lisp
(defun re-eval-buffer ()
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (not (eobp))
      (forward-sexp)
      (eval-defun nil))))

(defun re-eval-region ()
  (interactive)
  (when (region-active-p)
    (save-excursion
      (goto-char (region-beginning))
      (while (and (< (point) (region-end))
                  (not (eobp)))
        (forward-sexp)
        (eval-defun nil)))))
#+end_src

** ASCII table

#+begin_src emacs-lisp
(defun ascii-table ()
  (interactive)
  (with-current-buffer (get-buffer-create "*ASCII table*")
    (erase-buffer)
    (insert (format "ASCII characters up to number %d.\n" 254))
    (let ((i 0))
      (while (< i 254)
        (setq i (1+ i))
        (insert (format "%4d %c\n" i i)))))
  (pop-to-buffer "*ASCII table*")
  (goto-char (point-min)))
#+end_src

** DOS UNIX conversion

#+begin_src emacs-lisp
(defun dos2unix ()
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t)
    (replace-match "")))

(defun unix2dos ()
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\n" nil t)
    (replace-match "\r\n")))
#+end_src

** Void function

#+begin_src emacs-lisp
(defun void ()
  (interactive))
#+end_src
** Clean white spaces

#+begin_src emacs-lisp
(defun clean-white-spaces (kill-buffer-after f)
  (interactive
   (list (y-or-n-p "Kill buffer after cleaning ?")
         (ido-read-file-name "File to be cleaned: ")))
  (let ((buffer (find-file-noselect f)))
    (with-current-buffer buffer
      (delete-trailing-whitespace)
      (save-buffer)
      (when kill-buffer-after
        (kill-buffer)))))
#+end_src
   
** Dired do

#+begin_src emacs-lisp
(defmacro --dired-do-buffers (&rest body)
  `(mapc
    (lambda (f)
      (with-current-buffer (find-file-noselect f)
        (goto-char (point-min))
        ,@body
        (when (buffer-modified-p)
          (save-buffer))
        (kill-buffer)))
    (dired-get-marked-files)))
#+end_src

** Copy file/buffer name

#+begin_src emacs-lisp
(defun copy-buffer-name-as-kill ()
  (interactive)
  (let* ((c (read-char "[n]=name [f]=fullName [d]=directoryName"))
         (thing
          (cond
           ((= c ?n) (buffer-name))
           ((= c ?f) (buffer-file-name))
           ((= c ?d) (expand-file-name default-directory)))))
    (when thing
      (kill-new thing)
      (message thing))))
#+end_src

** Add to PATH environment variable
 
#+begin_src emacs-lisp
(defun add-to-path-env-var (path)
  (interactive
   (list (read-shell-command "Path: ")))
  (setenv "PATH" (concat path ":" (getenv "PATH"))))
#+end_src

** Sudo edit files that require =root= permissions

#+begin_src emacs-lisp
(defun sudo-edit (&optional arg)
  "Edit currently visited file as root.

With prefix ARG prompt for a file to visit. Will also prompt for a file to
visit if current buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/su::"
                         (ido-read-file-name "Find file (as root): ")))
    (find-alternate-file (concat "/su::" buffer-file-name))))
#+end_src

** Convert coding system

#+begin_src emacs-lisp
(defun convert-chinese-gbk-to-utf-8-unix-file (f &optional not-kill)
  (interactive (list (ido-read-file-name "file to convert: ")))
  (with-current-buffer (find-file-noselect f)
    (revert-buffer-with-coding-system 'chinese-gbk)
    (set-buffer-file-coding-system 'utf-8-unix)
    (save-buffer)
    (unless not-kill
      (kill-buffer))))

(defun convert-chinese-gbk-to-utf-8-unix-buffer ()
  (interactive)
  (convert-chinese-gbk-to-utf-8-unix-file (buffer-file-name) t))

(defun dired-do-convert-chinese-gbk-to-utf-8-unix ()
  (interactive)
  (mapc
   'convert-chinese-gbk-to-utf-8-unix-file
   (dired-get-marked-files)))
#+end_src

** Move key bindings

#+begin_src emacs-lisp
(defun move-key-binding (keymap-from keymap-to key)
  (define-key keymap-from key nil)
  (define-key keymap-to key (lookup-key keymap-from key)))
#+end_src

** Reopen file

#+begin_src emacs-lisp
(defun reopen-current-file ()
  (interactive)
  (let ((file (buffer-file-name)))
    (kill-buffer)
    (find-file file)))
#+end_src

** Delete blank lines

#+begin_src emacs-lisp
(defun my-delete-blank-lines ()
  (interactive)
  (require 'evil)
  (evil-ex (format "%sg/^\\s-*$/d"
                   (if (region-active-p)
                       "'<,'>"
                     ""))))
#+end_src
