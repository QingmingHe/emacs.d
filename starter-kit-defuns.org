#+TITLE: Starter Kit Defuns
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* The starter-kit-coding-hook:
A single hook holding those functions which should be run in *every*
code buffer.

We have a number of turn-on-* functions since it's advised that lambda
functions not go in hooks. Repeatedly evaling an add-to-list with a
hook value will repeatedly add it since there's no way to ensure that
a lambda doesn't already exist in the list.

#+name: starter-kit-hook-functions
#+begin_src emacs-lisp
(defun starter-kit-local-column-number-mode ()
  (make-local-variable 'column-number-mode)
  (column-number-mode t))

(defun starter-kit-local-comment-auto-fill ()
  (set (make-local-variable 'comment-auto-fill-only-comments) t)
  (auto-fill-mode t))

(defun starter-kit-turn-on-save-place-mode ()
  (setq save-place t))

(defun starter-kit-turn-on-whitespace ()
  (whitespace-mode t))
#+end_src

#+name: starter-kit-add-local-column-number-mode
#+begin_src emacs-lisp
(add-hook 'starter-kit-coding-hook 'starter-kit-local-column-number-mode)
#+end_src

#+name: start-kit-add-local-comment-auto-fill
#+begin_src emacs-lisp
(add-hook 'starter-kit-coding-hook 'starter-kit-local-comment-auto-fill)
#+end_src

#+name: starter-kit-add-pretty-lambdas
#+begin_src emacs-lisp
  (when (window-system)
    (add-hook 'starter-kit-coding-hook 'starter-kit-pretty-lambdas))
#+end_src

#+name: starter-kit-run-starter-kit-coding-hook
#+begin_src emacs-lisp
(defun run-starter-kit-coding-hook ()
  "Enable things that are convenient across all coding buffers."
  (run-hooks 'starter-kit-coding-hook))
#+end_src

#+srcname: starter-kit-recentf-ido-find-file
#+begin_src emacs-lisp 
  (defun recentf-ido-find-file () 
    "Find a recent file using Ido." 
    (interactive) 
    (let* ((file-assoc-list 
            (mapcar (lambda (x) 
                      (cons (file-name-nondirectory x) 
                            x)) 
                    recentf-list)) 
           (filename-list 
            (remove-duplicates (mapcar #'car file-assoc-list) 
                               :test #'string=)) 
           (filename (ido-completing-read "Choose recent file: " 
                                          filename-list 
                                          nil 
                                          t))) 
      (when filename 
        (find-file (cdr (assoc filename 
                               file-assoc-list)))))) 
 #+end_src 

* Other functions

#+BEGIN_SRC emacs-lisp
(defun my-no-word (fname)
  "Open MS word using antiword."
  (interactive (list (read-file-name "Open MS word file: ")))
  (let (
        (tmp-file-name (format (concat "/tmp/" "." (file-name-nondirectory fname))))
        )
    (progn
      (shell-command
       (format "antiword -m UTF-8 %s > %s" fname tmp-file-name))
      (find-file tmp-file-name))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-fill-line (&optional filling)
  "Fill current line with filling from (point) to default-fill-column"
  (interactive (list (read-char "Enter filling character: ")))
  (let ((l-filling " "))
    (when filling
      (setq l-filling filling))
    (let (
          (line-position nil)
          (i 0)
          (remainder nil)
          )
      (setq line-position (- (point) (line-beginning-position)))
      (setq remainder (- default-fill-column line-position))
      (while (< i remainder)
        (setq i (+ 1 i))
        (insert l-filling)))))
#+END_SRC

No such function in Emacs 24.4, so add it.
#+BEGIN_SRC emacs-lisp
(when (not (fboundp 'ad-advised-definition-p))
  (defmacro ad-macro-p (definition)
    ;;"non-nil if DEFINITION is a macro."
    (` (eq (car-safe (, definition)) 'macro)))
  
  (defun ad-advised-definition-p (definition)
    ;;"non-nil if DEFINITION was generated from advice information."
    (if (or (ad-lambda-p definition)
            (ad-macro-p definition)
            (ad-compiled-p definition))
        (let ((docstring (ad-docstring definition)))
          (and (stringp docstring)
               (string-match
                ad-advised-definition-docstring-regexp docstring))))))
#+END_SRC

On Windows and Cygwin, errors of /some/path/ is unsafe often occur. So
redefine server-ensure-safe-dir function to suppress this kind of error.
#+BEGIN_SRC emacs-lisp
(when (or *win32* *cygwin*)
  (defun server-ensure-safe-dir (dir) "Noop" t))
#+END_SRC

Map Cygwin path to Windows path. For example: map =/usr/bin/python= to
=D:/cygwin/usr/bin/python=.
#+BEGIN_SRC emacs-lisp
(defun cygwin-to-win-path (path &optional cygwin-root)
  "Transform Cygwin path to Windows path.

path: Cygwin path.
cygwin-root: root of Cygwin installed on Windows. D:/cygwin for example.
return: Windows path.
"
  (interactive)
  (let ((cygwin-root (or
                      cygwin-root
                      (getenv "CYGWIN_ROOT")
                      (read-string "Root of Cygwin in Windows system: "))))
    (format "%s%s" cygwin-root (expand-file-name path))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun resize-window (&optional arg)    ; Hirose Yuuji and Bob Wiener
  "*Resize window interactively."
  (interactive "p")
  (if (one-window-p) (error "Cannot resize sole window"))
  (or arg (setq arg 1))
  (let (c)
    (catch 'done
      (while t
	(message
	 "h=heighten, s=shrink, w=widen, n=narrow (by %d);  1-9=unit, q=quit"
	 arg)
	(setq c (read-char))
	(condition-case ()
	    (cond
	     ((= c ?h) (enlarge-window arg))
	     ((= c ?s) (shrink-window arg))
	     ((= c ?w) (enlarge-window-horizontally arg))
	     ((= c ?n) (shrink-window-horizontally arg))
	     ((= c ?\^G) (keyboard-quit))
	     ((= c ?q) (throw 'done t))
	     ((and (> c ?0) (<= c ?9)) (setq arg (- c ?0)))
	     (t (beep)))
	  (error (beep)))))
    (message "Done.")))
#+END_SRC
